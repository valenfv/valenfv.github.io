{"version":3,"sources":["DependancesGraph.js","SpaceGraph.js","PreviewComponent.js","LatencyPaper.js","DependancesAlgorithm.js","App.js","serviceWorker.js","index.js"],"names":["DependancesGraph","options","height","edges","smooth","graph","this","props","getNodes","getEdges","Component","SpaceGraph","layout","groups","useDefaultGroups","physics","enabled","interaction","dragNodes","dragView","hover","hoverConnectedEdges","multiselect","navigationButtons","selectable","selectConnectedEdges","tooltipDelay","zoomView","events","selectNode","event","nodeAux","nodes","group","body","push","selectNodes","key","PreviewComponent","state","valor","FormControl","style","minWidth","TextField","disabled","label","variant","name","type","value","onChange","setState","target","Button","onClick","callBackAdd","cancelarEdicion","color","LatencyPaper","onChangeTxtFieldLatency","bind","id","classes","component","formControl","FormLabel","Grid","container","direction","item","xs","maxWidth","latencias","asignacion","inputProps","min","max","step","InputLabelProps","shrink","resta","multiplicacion","division","suma","getAllPaths","cycle","actualIndex","acumOffset","offsetStack","pathStack","actualPath","length","concat","ways","i","acumOff","undefined","offset","pop","printNaturalLatency","sentencias","n","path","total","latencia","toString","tiempoViejo","printNaturalCycle","getTrazas","cycles","ciclos","graphMat","nodesCount","mat","Array","j","getIds","edgeId","edge","get","console","log","from","to","getPaths","lat","camino","Math","floor","caminoOffsets","JSON","parse","stringify","ciclo","tiempo","useStyles","makeStyles","theme","paper","padding","marginBottom","margin","spacing","button","vars","b","arVar","end","String","fromCharCode","canClick","lastOp","AddOps","React","useState","actualAssign","setActualAssign","addNewOp","parentCallback","setValue","assign","setAssign","letter","setLetter","handleChangeVarAr","letterA","setLetterA","handleChangeVarArA","op","setOp","index","setIndex","cte","setCte","setLastOp","latency","setLatency","id_var","written","setWritten","read","setRead","useEffect","callBackUpdateTempSentence","callBackUpdateTempSentenceRead","Paper","className","elevation","Typography","align","gutterBottom","display","formVisibility","RadioGroup","aria-label","FormControlLabel","control","Radio","width","InputLabel","Select","labelId","map","e","MenuItem","fullWidth","where","inside","addAssignAr","formVisibilityCallBack","App","valorAsignacion","asignaciones","formVisibilityControl","sentenciaActual","sentenciaTemporal","dependancesGraphNodes","dependancesGraphEdges","dependancesAlgorithm","graphAlgorithm","variablesLeidas","spaceGraphNodes","spaceGraphEdges","checked","checkedSecond","showPreview","changeTrazaState","trazas","noTrazas","aceleracion","tiempoNuevo","editOpNumber","callBackSetRead","Object","callBackSetWritten","callBackFormVisibilityControl","show","callBackValorAsignacionChange","childData","callBackUpdatePreview","newOp","callBackUpdateSentencesTemp","write","latenciaString","callBackUpdateSentencesRead","habilitarEdicion","idOp","callBackAddSentence","opNumber","deepCloneAsig","sentence","deepCloneSenten","showLatencies","download","filename","text","element","document","createElement","setAttribute","encodeURIComponent","appendChild","click","removeChild","exportar","exportObject","Date","now","importar","file","files","that","match","reader","FileReader","onload","readObject","result","readAsText","alert","handleChangeOnTrazaRadio","oldIndex","newIndex","oldNodes","newNodes","forEach","node","update","CssBaseline","AppBar","position","Toolbar","noWrap","Container","justify","alignItems","Collapse","in","TableContainer","Table","tables","size","TableHead","TableRow","TableCell","TableBody","row","background","scope","Tooltip","textAlign","title","arrow","clear","s","getLatency","graphGUI","variablesEscritas","sentencia","add","variableLeida","RegExp","test","fields","filter","dashes","createGraph","dependancesGraph","adjacentList","rep","fill","myCycles","indexOf","copyGraph","slice","g","findCircuits","getCycles","tempTraza","sort","a","spaceGraph","nodeIds","x","y","traza","k","createSpaceGraph","fontWeight","paddingTop","paddingBottom","marginTop","accept","htmlFor","Switch","parseInt","containter","indice","getNodesDependancesGraph","getEdgesDependancesGraph","getNodesSpaceGraph","getEdgesSpaceGraph","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f009b3e5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Graph from 'react-graph-vis';\n\n\nexport default class DependancesGraph extends Component\n{\n    render(){\n        const options = {\n            height: '250px',\n            edges: {\n                smooth: true\n              }\n        };\n        return(\n            <Graph \n                options={options}\n                graph= {this.props.graph}\n                getNodes = {this.props.getNodes} \n                getEdges= {this.props.getEdges}/>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Graph from 'react-graph-vis';\n\nexport default class SpaceGraph extends Component {\n    options = {\n        layout: {\n            /*hierarchical: {\n                enabled: true,\n                nodeSpacing: 0,\n                levelSeparation: 0,\n                direction: 'LR'\n            }*/\n        },\n        height: '500px',\n        groups: {\n            useDefaultGroups: true\n        },/*\n            a: {\n                color: { \n                    highlight:{\n                        background: \"red\"\n                    }   \n                }\n            },\n            b: {\n                color: { \n                    highlight: {\n                        background: \"green\"\n                    }\n                }\n            },\n            c: {\n                color: { \n                    highlight:{\n                        background:\"purple\"\n                    }\n                }\n            }\n        },*/\n        physics: {\n            enabled: false\n        },\n        interaction: {\n            dragNodes: false,\n            dragView: true,\n            hover: false,\n            hoverConnectedEdges: true,\n            multiselect: true,\n            navigationButtons: false,\n            selectable: true,\n            selectConnectedEdges: true,\n            tooltipDelay: 300,\n            zoomView: true\n        }\n\n    }\n\n    events = {\n        selectNode: function (event) { //This will be executed by Network object, not in SpaceGraph. So this is a Network.\n            let nodes = [];\n            const group = this.body.nodes[event.nodes[0]].options.group; // Get group of selected node\n            let nodeAux;\n            for(nodeAux in this.body.nodes){ //Get the nodes of same group as selected node\n                if(this.body.nodes[nodeAux].options.group === group)\n                    nodes.push(nodeAux);    \n            } \n            this.selectNodes(nodes, true); //Select group of nodes highlighting there edges\n        }\n    }\n\n    render() {\n        return (\n            <Graph key=\"Graph\"\n                graph= {this.props.graph}\n                getNodes = {this.props.getNodes} \n                getEdges= {this.props.getEdges}\n                events={this.events} \n                options={this.options} //Options must be on state? in SpaceGraph class? Outside?\n            />\n        )\n    }\n}","import React, { Component } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\n\nexport default class PreviewComponent extends Component\n{\n    state = {\n        valor : this.props.valor,\n    };\n    render(){\n        return(\n            \n                <FormControl style={{minWidth: '100%'}}> \n                <TextField\n                        disabled\n                        label=\"Preview\"\n                        variant=\"outlined\"\n                        name=\"pepe\"\n                        type=\"text\"\n                        key=\"333\"\n                        value={this.props.valor}\n                        onChange={(event) => {\n                          this.setState({\n                              valor: event.target.value,\n                          });\n                        }}\n                      />\n                      <Button type=\"submit\" onClick= {(event) => {\n                          this.props.callBackAdd();\n                          this.props.cancelarEdicion();\n                        } }variant=\"outlined\" color=\"primary\" minWidth='100%'>\n                         Agregar sentencia\n                      </Button>\n                      \n                      </FormControl>\n        );\n    }\n}","import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport FormControl from '@material-ui/core/FormControl';\nimport Paper from '@material-ui/core/Paper';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport TextField from '@material-ui/core/TextField';\n\nexport default class LatencyPaper extends Component {\n\n    constructor(props){\n        super(props);\n        this.onChangeTxtFieldLatency = this.onChangeTxtFieldLatency.bind(this);\n    }\n\n    onChangeTxtFieldLatency(event){\n        this.props.onChangeTxtFieldLatency(event.target.id, event.target.value);\n    }\n\n    render() {\n        const classes = this.props.classes;\n        return (\n                <FormControl component=\"fieldset\" style={classes.formControl}>\n                    <FormLabel component=\"legend\">Seleccione la latencia de las operaciones </FormLabel>\n                    <br />\n                    <Grid container  direction={\"column\"} >\n                        <Grid item xs>\n                            <TextField\n                                style={{ maxWidth: '100%' }}\n                                id=\"asignacion\"\n                                label=\"Asignacion\"\n                                value={this.props.latencias.asignacion}\n                                onChange={this.onChangeTxtFieldLatency}\n                                type=\"number\"\n                                inputProps={{\n                                    min: \"0\",\n                                    max: \"10\",\n                                    step: \"1\",\n                                }}\n                                InputLabelProps={{\n                                    shrink:true\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs>\n                            <TextField\n                                style={{ maxWidth: '100%' }}\n                                id=\"resta\"\n                                label=\"Resta\"\n                                value={this.props.latencias.resta}\n                                onChange={this.onChangeTxtFieldLatency}\n                                type=\"number\"\n                                inputProps={{\n                                    min: \"0\",\n                                    max: \"10\",\n                                    step: \"1\",\n                                }}\n                                InputLabelProps={{\n                                    shrink:true\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs>\n                            <TextField\n                                style={{ maxWidth: '100%' }}\n                                id=\"multiplicacion\"\n                                label=\"Multiplicacion\"\n                                value={this.props.latencias.multiplicacion}\n                                onChange={this.onChangeTxtFieldLatency}\n                                type=\"number\"\n                                inputProps={{\n                                    min: \"0\",\n                                    max: \"10\",\n                                    step: \"1\",\n                                }}\n                                InputLabelProps={{\n                                    shrink:true\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs>\n                            <TextField\n                                style={{ maxWidth: '100%' }}\n                                id=\"division\"\n                                label=\"Division\"\n                                value={this.props.latencias.division}\n                                onChange={this.onChangeTxtFieldLatency}\n                                type=\"number\"\n                                inputProps={{\n                                    min: \"0\",\n                                    max: \"10\",\n                                    step: \"1\",\n                                }}\n                                InputLabelProps={{\n                                    shrink:true\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs>\n                            <TextField\n                                style={{ maxWidth: '100%' }}\n                                id=\"suma\"\n                                label=\"Suma\"\n                                value={this.props.latencias.suma}\n                                onChange={this.onChangeTxtFieldLatency}\n                                type=\"number\"\n                                inputProps={{\n                                    min: \"0\",\n                                    max: \"10\",\n                                    step: \"1\",\n                                }}\n                                InputLabelProps={{\n                                    shrink:true\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </FormControl>\n\n        )\n    }\n}","import findCircuits from 'elementary-circuits-directed-graph';\n \n\n\n// returns a matrix of the different edges you can use to get to a node\nfunction getPaths(edges, nodesCount){\n    /*\n        Matriz de arreglo de objetos =>\n            Obj = {\n                latencia: int,\n                offset: int\n            }\n    */\n    let mat = new Array(nodesCount);\n    for(var i = 0; i < nodesCount; i++){\n        mat[i] = new Array(nodesCount);\n        for(var j = 0; j < nodesCount; j++){\n            mat[i][j] = [];\n        }\n    }\n   for(const edgeId of edges.getIds()){\n       const edge = edges.get(edgeId);\n       console.log(\"agregando edge de \", edge.from - 1, \" a \", edge.to - 1);\n       (mat[edge.from - 1][edge.to - 1]).push({\n           latencia: edge.latencia,\n           offset: edge.offset\n       });\n   }\n   return mat;\n}\n\nfunction getAllPaths(graph, cycle, actualIndex, acumOffset, offsetStack, pathStack, actualPath){\n    /*\n        - recorri todo si el inicio del ciclo es igual al final del ciclo\n            - si llego al final pusheo offset acumulado\n        - Voy a obtener todas las formas de llegar desde actualIndex hasta actualIndex + 1\n            - Sumo offset a acumOffset\n            - llamado recursivo con actualIndex + 1\n            - Resto offset de acumOffset\n    */\n   if(actualIndex === cycle.length - 1){\n       // llegue al final entonces pusheo en offsetStack\n       offsetStack.push(acumOffset);\n        // pussheo el camino actual d eoffsets\n       pathStack.push([].concat(actualPath));\n   }else{\n       const ways = graph[cycle[actualIndex]][cycle[actualIndex + 1]]; // returns an array\n       for(var i = 0; i < ways.length; i++){\n           const acumOff = actualPath[actualPath.length-1] === undefined ? ways[i].offset : actualPath[actualPath.length-1]+ways[i].offset;\n            actualPath.push(acumOff);\n            getAllPaths(graph, cycle, actualIndex + 1, acumOffset + ways[i].offset, offsetStack, pathStack, actualPath);\n            actualPath.pop();\n       }\n   }\n}\n\nfunction getCycles(dependancesGraph){\n    //Creo una estructura mas amigable para trabajar el algoritmo\n    /*let graph = dependancesGraph.nodes.map((node) => node.edges = dependancesGraph.edges.get({ \n        fields: ['id', 'from', 'to', 'offset', 'latencia'],\n        filter: (edge) => {\n            return (edge.from === node.id);\n        }\n    }))*/\n    let adjacentList = [];\n    let rep = new Array(dependancesGraph.nodes.getIds().length).fill(false);\n    let myCycles = [];\n    for(const edgeId of dependancesGraph.edges.getIds()){\n        let edge = dependancesGraph.edges.get(edgeId);\n        if(adjacentList[edge.from-1]=== undefined)\n            adjacentList[edge.from-1] = [];\n        if(edge.offset >=0 && adjacentList[edge.from-1].indexOf(edge.to-1) === -1){\n            adjacentList[edge.from-1].push(edge.to-1)\n        }\n        if(edge.from === edge.to){\n            if(rep[edge.to - 1] === false){\n                myCycles.push([edge.from-1, edge.from-1]);\n                rep[edge.to - 1] = true;\n            }\n        }\n    }\n\n    const copyGraph = adjacentList.slice();\n    for(var g = 0; g < copyGraph.length; g++){\n        if(!copyGraph[g]){\n            copyGraph[g] = [];\n        }\n    }\n    console.log(\"AH NAAAA, TIRABA ESA\", copyGraph);\n    myCycles = myCycles.concat(findCircuits(copyGraph));\n    //myCycles.forEach(c => {c.pop();})\n    //console.log(\"Cycles = \", myCycles);\n    //console.log(\"MATRIZ DE EDGES \", getPaths(dependancesGraph.edges, dependancesGraph.nodes.getIds().length));\n    //let trazas = [];\n    //for(let i=1; i<adjacentList.length; i++){\n        //printAllPaths(adjacentList, 0, i, myCycles, trazas);\n    //}\n    //console.log(\"Trazas = \", trazas);\n    \n    return myCycles;\n}\n\nfunction createSpaceGraph(dependancesGraph, spaceGraph, trazas){\n    let nodeIds = dependancesGraph.nodes.getIds();\n    \n\n    //console.log(getTrazas(graph, nodeIds.length, N));\n\n    /// Create nodes for GUI\n    for(let j =1; j<10; j++){\n        for(let i=1; i<nodeIds.length+1; i++){\n            const node = {\n                id: i.toString() + j.toString(),\n                label:\"S\"+ i.toString() + j.toString(),\n                x: j*70,\n                y: (i-1)*70,\n            };\n            trazas.forEach(traza => {\n                if(traza.nodes === undefined){\n                    traza.nodes = new Array(traza.offset);\n                    for(let k = 0; k< traza.offset; k++){\n                        traza.nodes[k]=new Array()\n                    }\n                }\n                for(let k = 0; k< traza.offset; k++){\n                    const index = traza.ciclo.indexOf(i-1);\n                    if( index !== -1 && index !== 0){\n                        if( ( (j -1 -k - traza.caminoOffsets[index-1]) % traza.offset) === 0){\n                            traza.nodes[k].push(node)\n                        }\n                    }\n                    else if(index !== -1){\n                        if( ( (j -1 -k ) % traza.offset) === 0){\n                            traza.nodes[k].push(node)\n                        }\n                    }\n                }\n                })\n            spaceGraph.nodes.add(node);\n        };\n    }\n\n    console.log(\"Trazas = \", trazas)\n\n    /// Create edges for GUI\n    dependancesGraph.edges.forEach((edge) => {\n        for(let i =1; i<10; i++){\n            if(edge.offset < 0 && i + edge.offset >=0 ){\n                spaceGraph.edges.add({\n                    from: edge.from.toString() + i.toString(),\n                    to: edge.to.toString() + (i+edge.offset).toString()\n                })\n            } \n            else if(edge.offset > 0 && i + edge.offset < 10) {\n                spaceGraph.edges.add({\n                    from: edge.from.toString() + i.toString(),\n                    to: edge.to.toString() + (i+edge.offset).toString()\n                })\n            }\n            else {  \n                if(edge.offset===0){\n                    spaceGraph.edges.add({\n                        from: edge.from.toString() + i.toString(),\n                        to: edge.to.toString() + i.toString()\n                    })\n                }\n            }   \n        }\n    });\n}\n\nfunction createGraph(graphGUI, sentencias){ ///Tener cuidado, estamos admitiendo repetidos\n    let variablesEscritas = [];\n    sentencias.forEach((sentencia) => { //Creo una estructura auxiliar mas amigable que me de informacion sobre las variables escritas\n        graphGUI.nodes.add({\n            id: sentencia.id,\n            label: \"S\"+ sentencia.id\n        })\n        if(variablesEscritas[sentencia.written]=== undefined)\n            variablesEscritas[sentencia.written]= {};    \n        if(variablesEscritas[sentencia.written.id_var] === undefined){\n\n            variablesEscritas[sentencia.written.id_var] = [{\n                sentencia: sentencia.id,\n                offset: sentencia.written.offset,\n                latencia: sentencia.latencia\n            }];\n        }\n        else\n            variablesEscritas[sentencia.written.id_var].push({\n                sentencia: sentencia.id,\n                offset: sentencia.written.offset,\n                latencia: sentencia.latencia\n            });\n        })\n    sentencias.forEach((sentencia) =>{\n        sentencia.read.forEach((variableLeida) =>{\n            if(variableLeida.id_var !== undefined){ //Si el formato de la variable esta bien\n                if(variablesEscritas[variableLeida.id_var] !== undefined){ //Si alguien escribio la variable\n                    variablesEscritas[variableLeida.id_var].forEach((node) =>{ //Node contiene informacion de quienes escribieron la variable leida\n                        if(sentencia.id <= node.sentencia){ // DEPENDENCIA WAR con ciclos anteriores\n                            if(RegExp(\"[A-M]\").test(variableLeida.id_var)){ //Si es una variable la variableLeida\n                                if(graphGUI.edges.get(node.sentencia.toString() + sentencia.id.toString() + node.latencia.toString()+ \"1\")===null){\n                                    let cant =  graphGUI.edges.get({\n                                        fields: ['id'],\n                                        filter: edge => {\n                                            return edge.from=== node.sentencia && edge.to === sentencia.id\n                                        }\n                                    }).length\n                                    graphGUI.edges.add({\n                                        id: node.sentencia.toString() + sentencia.id.toString() + node.latencia.toString()+ \"1\",\n                                        //key: node.sentencia.toString() + sentencia.id.toString() ,\n                                        from: node.sentencia,\n                                        to:sentencia.id,\n                                        offset: 1,\n                                        latencia: node.latencia,\n                                        label: \"(\" + node.latencia + \", 1)\"  \n                                        //smooth: {type: 'curvedCW', roundness: 0.5*cant}\n                                    })\n                                }\n                            }\n                            else if(node.offset - variableLeida.offset > 0){// Si es un arreglo la variableLeida y offsetWrite - offsetRead > 0 existe dependencia\n                                if(graphGUI.edges.get(node.sentencia.toString() + sentencia.id.toString() + node.latencia.toString() +(node.offset-variableLeida.offset).toString())=== null){\n                                    let cant =  graphGUI.edges.get({\n                                        fields: ['id'],\n                                        filter: edge => {\n                                            return edge.from=== node.sentencia && edge.to === sentencia.id\n                                        }\n                                    }).length\n                                    graphGUI.edges.add({\n                                        id: node.sentencia.toString() + sentencia.id.toString() + node.latencia.toString() +(node.offset-variableLeida.offset).toString() ,\n                                        // key: node.sentencia.toString() + sentencia.id.toString() ,\n                                        from: node.sentencia,\n                                        to: sentencia.id,\n                                        offset:node.offset - variableLeida.offset,\n                                        latencia: node.latencia,\n                                        label: \"(\"+ node.latencia + \", \"+  (node.offset - variableLeida.offset) + \")\",\n                                        dashes: node.offset - variableLeida.offset <0 ? true : false\n                                        //smooth: {type: 'curvedCW', roundness: 0.1* cant}\n                                    })\n                                }\n                            } \n                        } \n                        else {//Dependencia RAW\n                            if(graphGUI.edges.get(node.sentencia.toString() + sentencia.id.toString() +  node.latencia.toString()+ (node.offset-variableLeida.offset).toString())===null){\n                                let cant =  graphGUI.edges.get({\n                                    fields: ['id'],\n                                    filter: edge => {\n                                        return edge.from=== node.sentencia && edge.to === sentencia.id\n                                    }\n                                }).length\n\n                                graphGUI.edges.add({\n                                    id: node.sentencia.toString() + sentencia.id.toString() +  node.latencia.toString()+ (node.offset-variableLeida.offset).toString(),\n                                    // key: node.sentencia.toString() + sentencia.id.toString() ,\n                                    from: node.sentencia,\n                                    to: sentencia.id,\n                                    offset: node.offset - variableLeida.offset,\n                                    latencia: node.latencia,\n                                    label: \"(\"+ node.latencia + \", \"+  (node.offset - variableLeida.offset) + \")\",\n                                    dashes: node.offset - variableLeida.offset <0 ? true : false\n                                    //smooth: {type: 'curvedCW', roundness: 0.1 * cant}\n                                })\n                            }\n                        }\n                    })\n                }\n            }\n        })\n        \n    })\n    console.log(graphGUI.edges)\n}\nfunction printNaturalLatency(cycle, sentencias, offset, n){\n    let path = \"\";\n    let total = 0;\n    for(var i = 0; i < cycle.length - 1; i++){\n        if(i == cycle.length - 2){\n            path += (sentencias[cycle[i]].latencia).toString();\n        }else{\n            path += (sentencias[cycle[i]].latencia).toString() + \" + \";\n        }\n        total += sentencias[cycle[i]].latencia;\n    }\n    var tiempoViejo = total;\n    if(offset != 0 && offset != 1)\n        total = total * (n / offset);\n    else\n        total = total * n;\n    return {path, total, tiempoViejo};\n}\nfunction printNaturalCycle(cycle, offset, n){\n    let path = \"(\";\n    for(var i = 0; i < cycle.length - 1; i++){\n        if(i == cycle.length - 2){\n            path += \"S\" + (cycle[i] + 1).toString();\n        }else{\n            path += \"S\" + (cycle[i] + 1).toString() + \" + \";\n        }\n    }\n    path += \") * \" + n;\n    if(offset != 0 && offset != 1){\n        path += \"/\" + offset;\n    }\n    return path;\n}\n\nfunction getTrazas(edges, nodes, cycles, sentencias, n){\n    let ciclos = [];\n    /*\n        camino,\n        suma,\n        total\n    */\n    // recorrer todos los ciclos\n    //function getAllPaths(graph, cycle, actualIndex, acumOffset, offsetStack){\n    const graphMat = getPaths(edges, nodes.getIds().length);\n    for(var i = 0; i < cycles.length; i++){\n        var acumOffset = 0;\n        var actualIndex = 0;\n        var offsetStack = [];\n        var pathStack = [];\n        var actualPath = [];\n        getAllPaths(graphMat, cycles[i], actualIndex, acumOffset, offsetStack, pathStack, actualPath);\n        for(var j = 0; j < offsetStack.length; j++){\n            var lat = printNaturalLatency(cycles[i], sentencias, offsetStack[j], n);\n            ciclos.push({\n                camino: printNaturalCycle(cycles[i], offsetStack[j], n),\n                latencias: lat.path,\n                total: Math.floor(lat.total * 100) / 100,\n                caminoOffsets: JSON.parse(JSON.stringify(pathStack[j])),\n                ciclo: cycles[i],\n                offset: offsetStack[j],\n                tiempo: lat.tiempoViejo\n            });\n        }\n    }\n    return ciclos;\n}\nexport {\n    createGraph,\n    createSpaceGraph,\n    printNaturalCycle,\n    printNaturalLatency,\n    getTrazas,\n    getCycles\n}\n/*\nS1\tN[i -1] = O[i -2] + P[i -3]\nS2\tA = A * A + N[i -1]\nS3\tQ[i] = N[i] * A\nS4\tP[i] = Q[i + 2] / 2\nS5\tO[i] = Q[i -1] * 5\n\nejemplo \n\nlet variablesEscritas = {};\nsentencias.forEach((sentencia) => {\n    graphAux.push([]);\n    graph.nodes.push({\n        id: sentencia.id,\n        label: \"S\"+ sentencia.id\n    })\n    if(variablesEscritas[sentencias.write]=== undefined)\n        variablesEscritas[sentencias.write]= {};    \n    if(variablesEscritas[sentencia.write.id_var] === undefined)\n        variablesEscritas[sentencia.write.id_var] = [{\n                                                        sentencia: sentencia.id,\n                                                        offset: sentencia.write.offset,\n                                                        latencia: sentencia.latencia\n                                                    }];\n    else\n        variablesEscritas[sentencia.write.id_var].push({\n                                                        sentencia: sentencia.id,\n                                                        offset: sentencia.write.offset,\n                                                        latencia: sentencia.latencia\n                                                        });\n})\nsentencias.forEach((sentencia) =>{\n    sentencia.read.forEach((variableLeida) =>{\n        variablesEscritas[variableLeida.id_var].forEach((node) =>{ //Node contiene informacion de quienes escribieron la variable leida\n            if(sentencia.id <= node.sentencia){ // DEPENDENCIA WAR con ciclos anteriores \n                if(RegExp(\"[A-M]\").test(variableLeida.id_var)){ //Si es una variable la variableLeida\n                    if(graphAux[node.sentencia-1].indexOf(sentencia.id-1)=== -1)\n                        graphAux[node.sentencia-1].push(sentencia.id-1);\n                    graph.edges.push({\n                        id: node.sentencia.toString() + sentencia.id.toString() ,\n                        key: node.sentencia.toString() + sentencia.id.toString() ,\n                        from: node.sentencia,\n                        to:sentencia.id,\n                        offset: 1,\n                        lable: \"(\" + node.latencia + \", 1)\"  \n                    })\n                }\n                else if(node.offset - variableLeida.offset > 0){// Si es un arreglo la variableLeida y offsetWrite - offsetRead > 0 existe dependencia\n                    if(graphAux[node.sentencia-1].indexOf(sentencia.id-1)=== -1)\n                         graphAux[node.sentencia-1].push(sentencia.id-1);    \n                    graph.edges.push({\n                        id: node.sentencia.toString() + sentencia.id.toString() ,\n                        key: node.sentencia.toString() + sentencia.id.toString() ,\n                        from: node.sentencia,\n                        to: sentencia.id,\n                        offset:node.offset - variableLeida.offset,\n                        label: \"(\"+ node.latencia + \", \"+  (node.offset - variableLeida.offset) + \")\"\n                    })\n                } \n            } \n            else {//Dependencia RAW\n                if(graphAux[node.sentencia-1].indexOf(sentencia.id-1)=== -1)\n                    graphAux[node.sentencia-1].push(sentencia.id-1);\n                graph.edges.push({\n                    id: node.sentencia.toString() + sentencia.id.toString() ,\n                    key: node.sentencia.toString() + sentencia.id.toString() ,\n                    from: node.sentencia,\n                    to: sentencia.id,\n                    offset: node.offset - variableLeida.offset,\n                    label: \"(\"+ sentencia.latencia + \", \"+  (node.offset - variableLeida.offset) + \")\"\n                })\n            }\n        })\n    })\n    /*\n    S1: A[i] = 3+2;         \n    S2: B[i] = A[i] *2      \n\n    S1 -> (0) S2\n\n    S1: B[i] = A[i] *2*\n    S2: A[i] = 3+2;\n\n    No hay dependencia\n\n    Por ende, mismo modificador, primero write despues read hay dependencia, caso contrario no existe\n    Offset = offsetWrite - offsetRead\n    S1: B = B*2\n    S1-> (1) S1\n  \n    S1: A[i] = B *2\n    S2: B = 3;\n\n    S2 -> (1) S1\n\n    S1: B = 3;\n    S2: A[i] = B *2 \n    S1 -> (0) S2\n\n    Por ende, misma variable, primero write despues read, hay dependencia offset = offsetWrite - offsetRead\n    primero read despues write hay dependencia offset = offsetWrite - offsetRead + 1\n\n\n    S1: A[i] = E[i-1] *2 \n    S2: E[i] = 45/A[i-1]\n\n    S1-> (1) S2 \n    S2-> (1) S1\n\n    S1: A[i-1] = E[i-2] *2\n    S2: E[i-1] = A[i-1] +3\n    \n    S1-> (0) S2\n    S2-> (1) S1\n\n    Por ende, distinto modificador primero write despues read offset = offsetWrite - offserRead\n    distinto modificador primero read despues write offset = offsetWrite - offsetRead\n\n    S1: A[i+1] = 23\n    S2: B[i] = A[i] * 23\n\n    S1-> (1) S2\n\n    Por ende distinto modificador primero write despues read offset = offsetWrite - offsetRead \n\n    S1: A[i]= E[i-1] - 3\n    S2: E[i-1] = 23/2\n\n    S2-> (1) S1\n\n\n    Distinto modificador\n    \n});\n\n// Fijarse si vamos a necesitar esto dado que nodes y edges seran ahora del tipo dataSet de vis js\nfunction existe(obj, objects){\n    for(var i = 0; i < objects.length; i++){\n      if(obj.id === objects[i].id)\n        return true;\n    }\n    return false;\n  }\nfunction keepUnique(edges){\n    aReturn = []\n    edges.forEach((elem) => {\n      if(!existe(elem, aReturn)){\n        aReturn.push(elem);\n      }\n    });\n    return aReturn;\n  }\n\n  graph.edges = keepUnique(graph.edges);\n  console.log(\"Graph for UI\");\n  console.log(graph);\n  console.log(\"Graph for algorithm\");\n  console.log(graphAux);\n\n\n  getCryclesUtil = (graph, v, visited, recStack, cicles, path) => {\n      // Mark current node as visited and  \n      // adds to recursion stack \n      visited[v] = true;\n      recStack[v] = true;\n      \n      path.push(v);\n      // Recur for all neighbours \n      // if any neighbour is visited and in  \n        // recStack then graph is cyclic \n      for(const neighbour of graph[v]) {\n        if (visited[neighbour] === false) {\n            getCryclesUtil(graph, neighbour, visited, recStack, cicles, path);\n        }\n        else {\n            if (recStack[neighbour] === true) {\n                path.push(neighbour);\n                cicles.push(path.slice());\n                path.pop();\n            }\n        }\n      };\n      \n      // The node needs to be poped from  \n      // recursion stack before function ends \n      path.pop();\n      recStack[v] = false\n    } \n\n// Returns true if graph is cyclic else false \ngetCycles = (graph) => {\n\n    let path=[];\n    let cicles = [];\n    visited =  new Array(graph.length).fill(false); \n    recStack =  new Array(graph.length).fill(false);\n    for(node=0; node< graph.length; node++){\n        if (visited[node] === false) {\n            getCryclesUtil(graph,node,visited,recStack, cicles, path);\n        }\n    } \n    return cicles;\n    } \n\nconsole.log(\"IsCyclick graphaux\");\nconsole.log(getCycles(graphAux));\n*/\n\n","import React, {Fragment} from 'react';\nimport './index.css';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Paper from '@material-ui/core/Paper';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport TextField from '@material-ui/core/TextField';\nimport DependancesGraph from './DependancesGraph';\nimport SpaceGraph from './SpaceGraph';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport PreviewComponent from './PreviewComponent.js';\nimport LatencyPaper from './LatencyPaper';\nimport { createGraph, createSpaceGraph, printNaturalCycle, printNaturalLatency, getTrazas, getCycles} from './DependancesAlgorithm.js';\nimport Collapse from '@material-ui/core/Collapse';\nimport Switch from '@material-ui/core/Switch';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: '7px',\n    marginBottom: '4px'\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: '70%'\n  },\n  button: {\n    margin: theme.spacing(1, 0, 0, 0),\n  },\n}));\n\n\nconst vars = (b) => {\n  // if b is true get first half of alphabet\n  var arVar = []\n  var start = (b) ? 65 : 78;\n  var end = b ? 77 : 90;\n  for(var i = start; i <= end; i++){\n    arVar.push(String.fromCharCode(i));\n  }\n  return arVar;\n  // <MenuItem value=\"10\">Ten</MenuItem>\n};\n\nconst canClick = (value, lastOp) => {\n  return (value === 'variable' && (lastOp == 'arreglo' || lastOp == 'variable' || lastOp == 'constante'))\n      || (value === 'arreglo' && (lastOp == 'arreglo' || lastOp == 'variable' || lastOp == 'constante'))\n      || (value === 'constante' && (lastOp == 'arreglo' || lastOp == 'variable' || lastOp == 'constante'))\n      || (value === 'operacion' && lastOp == 'operacion')\n      || (value === 'operacion' && lastOp === 0);\n};\nconst AddOps = (props) => {\n  const classes = useStyles();\n\n  const [actualAssign, setActualAssign] = React.useState('');\n  const addAssignAr = function(where){\n      var inside = index > 0 ? \"i + \" + index.toString() : \"i \" + index.toString(); \n      if(index !== 0 && index!== \"0\"){\n        setActualAssign(where.concat(\"[\" + inside + \"] = \"));\n        props.parentCallback(where.concat(\"[\" + inside + \"] = \"));\n      }else {\n        setActualAssign(where.concat(\"[i] = \"));\n        props.parentCallback(where.concat(\"[i] = \"));\n      }\n  }\n  const addAssign = function(where){\n      setActualAssign(where.concat(\" = \"));\n      props.parentCallback(where.concat(\" = \"));\n  }\n\n  const addNewOp = (valor) => {\n    setActualAssign(actualAssign + valor + \" \");\n    props.parentCallback(actualAssign + valor + \" \");\n    \n  };\n  // second fiedset\n  const [value, setValue] = React.useState('constante');\n  // first fieldset\n  const [assign, setAssign] = React.useState('variable');\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  const [letter, setLetter] = React.useState('A');\n  const handleChangeVarAr = (event) => {\n    setLetter(event.target.value);\n  };\n  const [letterA, setLetterA] = React.useState('N');\n  const handleChangeVarArA = (event) => {\n    setLetterA(event.target.value);\n  };\n  const handleChangeAssign = (event) => {\n    setAssign(event.target.value);\n  };\n\n  const [op, setOp] = React.useState('+');\n  const handleChangeOp = (event) => {\n    setOp(event.target.value);\n  };\n  const [index, setIndex] = React.useState(0);\n  // state for literal numbers\n  const [cte, setCte] = React.useState(0); \n \n  const [lastOp, setLastOp] = React.useState(0);\n\n  // keep actual sentence updated\n  const [latency, setLatency] = React.useState(\"=\"); \n  const [written, setWritten] = React.useState({id_var: '0', offset: 0});\n  const [read, setRead] = React.useState(null);\n\n   //props.callBackUpdateTempSentence\n  React.useEffect(() => {\n    props.callBackUpdateTempSentence(read, written, latency);\n  },\n  [written, latency]);\n  React.useEffect(() => {\n    props.callBackUpdateTempSentenceRead(read);\n  },\n  [read]);\n\n    return (\n      <Paper className={classes.paper} elevation={3} height=\"100%\">\n        <Typography component=\"h5\" variant=\"h5\" align=\"center\" color=\"textPrimary\" gutterBottom>\n          Asignacion\n        </Typography>\n          <FormControl style={{display: props.formVisibility ? 'none' : 'block'}}  component=\"fieldset\"  className={classes.formControl}>\n            \n            <FormLabel component=\"legend\">Seleccione elemento a agregar</FormLabel>\n            <RadioGroup aria-label=\"quiz\" name=\"quiz\" value={assign} onChange={handleChangeAssign}>\n              <FormControlLabel value=\"variable\" control={<Radio />} label=\"Variable\" />\n              <FormControlLabel value=\"arreglo\" control={<Radio />} label=\"Arreglo\" />\n            </RadioGroup>\n            {/* <FormHelperText>Hola</FormHelperText> */}\n\n            <Paper width={1} maxWidth=\"xl\" className={classes.paper} style={{display: assign === 'variable' ? 'block' : 'none'}} elevation={3} >\n              <FormControl style={{minWidth: '100%'}}> \n                <InputLabel id=\"label\">Nombre</InputLabel>\n                <Select labelId=\"label\" id=\"select\" value={letter} onChange={handleChangeVarAr}>\n                    {\n                      vars(true).map(e => <MenuItem value={e}>{e}</MenuItem>)\n                    }\n                </Select>\n              </FormControl>\n            </Paper>\n            <Paper width={1} className={classes.paper} style={{display: assign === 'arreglo' ? 'block' : 'none'}} elevation={3} >\n              <FormControl style={{minWidth: '30%'}}> \n                <InputLabel id=\"label\">Nombre</InputLabel>\n                <Select labelId=\"label\" id=\"select\" value={letterA} onChange={handleChangeVarArA}>\n                    {\n                      vars(false).map(e => <MenuItem value={e}>{e}</MenuItem>)\n                    }\n                </Select>\n              </FormControl>\n              <TextField\n                style={{maxWidth: '70%'}}\n                id=\"standard-number\"\n                label=\"Modificador\"\n                type=\"number\"\n                value={index}\n                onChange={(event) => {\n                  setIndex(event.target.value);\n                }}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n              />\n            </Paper>\n            <Button fullWidth type=\"submit\" width='100%' onClick={\n              () => {\n                setLastOp(0);\n                setLatency(\"=\");\n                if(assign === 'arreglo'){\n                  addAssignAr(letterA) \n                  // keep state updated\n                  setWritten({\n                    id_var: letterA,\n                    offset: index\n                  });\n                }else{\n                  addAssign(letter); \n                  setWritten({\n                    id_var: letter,\n                    offset: 0\n                  });\n                }\n                // mostrar menu inferior\n                props.formVisibilityCallBack(true);\n              }\n            } variant=\"outlined\" color=\"primary\" className={classes.button}>\n              Agregar Asignacion\n            </Button>\n          </FormControl>\n        \n          <FormControl style={{display: props.formVisibility ? 'block' : 'none'}} component=\"fieldset\"  className={classes.formControl}>\n            \n            <FormLabel component=\"legend\">Seleccione elemento a agregar</FormLabel>\n            <RadioGroup aria-label=\"quiz\" name=\"quiz\" value={value} onChange={handleChange}>\n              <FormControlLabel value=\"constante\" control={<Radio />} label=\"Constante\" />\n              <FormControlLabel value=\"variable\" control={<Radio />} label=\"Variable\" />\n              <FormControlLabel value=\"arreglo\" control={<Radio />} label=\"Arreglo\" />\n              <FormControlLabel value=\"operacion\" control={<Radio />} label=\"Operacion\" />\n            </RadioGroup>\n            {/* <FormHelperText>Hola</FormHelperText> */}\n\n            <Paper width={'auto'} className={classes.paper} style={{display: value === 'constante' ? 'block' : 'none'}} elevation={3} >\n            <TextField\n              value = {cte}\n              onChange={(event) => {setCte(event.target.value)}}\n              style={{minWidth: '100%'}}\n              id=\"standard-number\"\n              label=\"Number\"\n              type=\"number\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n            </Paper>\n            <Paper width={1} maxWidth=\"xl\" className={classes.paper} style={{display: value === 'variable' ? 'block' : 'none'}} elevation={3} >\n              <FormControl style={{minWidth: '100%'}}> \n                <InputLabel id=\"label\">Nombre</InputLabel>\n                <Select labelId=\"label\" id=\"select\" value={letter} onChange={handleChangeVarAr}>\n                    {\n                      vars(true).map(e => <MenuItem value={e}>{e}</MenuItem>)\n                    }\n                </Select>\n              </FormControl>\n            </Paper>\n            <Paper width={1} className={classes.paper} style={{display: value === 'arreglo' ? 'block' : 'none'}} elevation={3} >\n              <FormControl style={{minWidth: '30%'}}> \n                <InputLabel id=\"label\">Nombre</InputLabel>\n                <Select labelId=\"label\" id=\"select\" value={letterA} onChange={handleChangeVarArA}>\n                    {\n                      vars(false).map(e => <MenuItem value={e}>{e}</MenuItem>)\n                    }\n                </Select>\n              </FormControl>\n              <TextField\n                value={index}\n                onChange={(event) => {setIndex(event.target.value)}}\n                style={{maxWidth: '70%'}}\n                id=\"standard-number\"\n                label=\"Modificador\"\n                type=\"number\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n              />\n            </Paper>\n            <Paper width={1} className={classes.paper} style={{display: value === 'operacion' ? 'block' : 'none'}} elevation={3} >\n              <FormControl style={{minWidth: '100%'}}> \n                  <InputLabel id=\"label\">Nombre</InputLabel>\n                  <Select labelId=\"label\" id=\"select\" value={op} onChange={handleChangeOp}>\n                      <MenuItem value='+'>+</MenuItem>\n                      <MenuItem value='-'>-</MenuItem>\n                      <MenuItem value='*'>*</MenuItem>\n                      <MenuItem value='/'>/</MenuItem>\n                  </Select>\n                </FormControl>\n            </Paper>\n            <Button fullWidth type=\"submit\" disabled={canClick(value, lastOp)} variant=\"outlined\" onClick={() => {\n                setLastOp(value);\n                if(value === 'variable'){\n                  \n                  addNewOp(letter)\n                  // agregar a read\n                  setRead({\n                    id_var: letter,\n                    offset: 0\n                  });\n                }else{\n                  if(value === 'constante'){\n                    addNewOp(cte);\n                  }else{\n                    if(value === 'arreglo'){\n                      var inside = index > 0 ? \"i + \" + index.toString() : \"i \" + index.toString();\n                      if(index !== 0 && index!==\"0\"){\n                        addNewOp(letterA + \"[\" + inside + \"]\"); \n                      }else{\n                        addNewOp(letterA + \"[i]\");   \n                      }\n                      // agregar a read\n                      setRead({\n                        id_var: letterA,\n                        offset: index\n                      });\n                    }else{\n                      // operacion\n                      addNewOp(op);\n                      setLatency(latency + op);\n                    }\n                  }\n                }\n                 // no se por que tengo q mandar esa funcion lambda ahi\n                // ACA LLAMA\n            }} color=\"primary\" className={classes.button}>\n              Agregar Operacion\n            </Button>\n          </FormControl>\n        \n      </Paper>                   \n    );\n};\n\nfunction createData(op, sentence) {\n  return { op, sentence };\n}\n\n\nexport default class App extends React.Component{\n\n  /*\n    State for functional component\n  */\n  state = {\n    valorAsignacion: '', // valor  de la asignacion sin completar o completada\n    asignaciones: [], // se guarda el valor natural de la asignacion\n    formVisibilityControl: false, // estado de la UI\n    sentenciaActual: 1, // numero de sentencias actuales\n    sentencias: [], // se almacenan las sentencias para ser analizadas por el algoritmo\n    sentenciaTemporal: {\n      id: 0,\n      latencia: \" \",\n      written: null,\n      read: [],\n    }, // sentencia no completada aun,\n    latencias:{ //Estado de las latencias del componente LatencyPaper\n      asignacion: 1,\n      suma: 2,\n      resta: 3,\n      multiplicacion: 4,\n      division: 5\n    },\n    /*\n      id_var: letterA,\n      offset: index\n    */\n    read: [], // leidos actuales\n    written: null, // escrito actual\n    dependancesGraphNodes: null, // No pude hacerlo como graph { nodes, edges } porque setState me rompia\n    dependancesGraphEdges: null,\n    dependancesAlgorithm:{\n      graphAlgorithm: [],\n      variablesLeidas: []\n    },\n    spaceGraphNodes: null,\n    spaceGraphEdges: null,\n    n: 1000,\n    checked: false, // shows latencies paper\n    checkedSecond: false, // shows graphs and traces\n    showPreview: true,\n    cycles: [],\n    changeTrazaState: 0,\n    trazas: [{tiempo: 0, total: 1}],\n    noTrazas: false,\n    aceleracion: {\n      tiempoViejo: 0,\n      tiempoNuevo: 1\n    },\n    editOpNumber: null\n  };\n\n  \n  callBackSetRead = (read) => {\n    this.setState({\n      read: this.state.read.concat(Object.assign({}, read)),\n    }, () => {\n    });\n  };\n  callBackSetWritten = (written) => {\n    this.setState({written: written});\n  };\n  //\n\n  callBackFormVisibilityControl = (show) => {\n    this.setState({formVisibilityControl: show});\n  };\n  callBackValorAsignacionChange = (childData) =>{\n      this.setState({\n        valorAsignacion: childData,\n        showPreview: true\n      });\n      \n  };\n  // no se si se usa pero lo dejo por las dudas AAJA\n  callBackUpdatePreview = (newOp) => {\n      this.setState({valorAsignacion: this.state.valorAsignacion.concat(\" \" + newOp + \" \")});\n  };\n  ///////////////\n  callBackUpdateSentencesTemp = (read, write, latency) => {\n    this.setState({\n      sentenciaTemporal: {\n        id: this.state.sentenciaActual,\n        latencia: latency,\n        latenciaString: latency,\n        written: Object.assign({}, write),\n      } \n    })\n  };\n  callBackUpdateSentencesRead = (read) => {\n    this.setState({\n      sentenciaTemporal: {\n        read: this.state.read.concat(Object.assign({}, read)),\n      }\n    });\n    \n  };\n\n  /*\n    FUNCIONES PARA EDITAR\n  */ \n  habilitarEdicion = (idOp) => {\n    this.setState({editOpNumber: idOp});\n  }\n  cancelarEdicion = () => {\n    this.setState({\n      formVisibilityControl: false,\n      editOpNumber: null,\n      sentenciaTemporal: {\n        id: 0,\n        latencia: \" \",\n        written: null,\n        read: [],\n      },\n      valorAsignacion: ''\n    });\n  }\n  /*\n    FUNCIONES PARA EDITAR\n  */ \n  // callback to definitely add the sentence\n  callBackAddSentence = () => {\n    if(!this.state.editOpNumber){\n      this.state.sentenciaTemporal.read= this.state.read;\n      this.setState({\n      asignaciones: this.state.asignaciones.concat(\n        {\n          sentence: this.state.valorAsignacion,\n          op: this.state.sentenciaActual,\n        }\n        ),\n        sentenciaActual: this.state.sentenciaActual+1,\n        //sentencias: this.state.sentencias.concat(Object.assign({}, this.state.sentenciaTemporal)),\n        sentencias: [...this.state.sentencias, this.state.sentenciaTemporal], //Analizar mas profundamente si anda, sino hay que usar el object assign\n        formVisibilityControl: false,\n        valorAsignacion: '',\n        read: []\n      },\n      // callback\n      () => {\n        this.setState({sentenciaTemporal: null});\n        console.log(\"PERROOOOO\", this.state.asignaciones);\n      });\n    }else{\n      // op debe ser distinta\n      var opNumber = this.state.editOpNumber;\n      this.state.sentenciaTemporal.read= this.state.read;\n      this.state.sentenciaTemporal.id = opNumber;\n      \n      //asignaicones debe cambiar\n      var deepCloneAsig = JSON.parse(JSON.stringify(this.state.asignaciones));\n      deepCloneAsig[opNumber - 1] = {sentence: this.state.valorAsignacion, op: opNumber};\n      // sentencia actual no cambia\n      //sentencias cambia\n      var deepCloneSenten = JSON.parse(JSON.stringify(this.state.sentencias));\n      deepCloneSenten[opNumber - 1] = JSON.parse(JSON.stringify(this.state.sentenciaTemporal));\n      this.setState({\n      asignaciones: deepCloneAsig,\n        //sentencias: this.state.sentencias.concat(Object.assign({}, this.state.sentenciaTemporal)),\n        sentencias: deepCloneSenten, //Analizar mas profundamente si anda, sino hay que usar el object assign\n        formVisibilityControl: false,\n        valorAsignacion: '',\n        read: []\n      },\n      // callback\n      () => {\n        this.setState({sentenciaTemporal: null});\n        console.log(this.state.sentencias);\n      });\n    }\n    \n      \n\n  };\n\n  getNodesDependancesGraph(nodes){\n    this.setState({dependancesGraphNodes: nodes});\n  }\n\n  getEdgesDependancesGraph(edges){\n    this.setState({dependancesGraphEdges: edges } );\n  }\n\n  getNodesSpaceGraph(nodes){\n    this.setState({spaceGraphNodes : nodes});\n  }\n  getEdgesSpaceGraph(edges){\n    this.setState({spaceGraphEdges : edges});\n  }\n\n  getLatency(sentence){\n    let suma =0;\n    \n    for(let op of sentence.latenciaString){\n      switch(op){\n        case '=':\n          op=this.state.latencias.asignacion;\n          break;\n        case '+':\n          op=this.state.latencias.suma;\n          break;\n        case '-':\n          op=this.state.latencias.resta;\n          break;\n        case '*':\n          op=this.state.latencias.multiplicacion;\n          break;\n        case '/':\n          op=this.state.latencias.division;\n          break;\n        default:\n          op=0;\n            break;\n      }\n      suma+= op;\n    }\n    sentence.latencia = suma;\n  }\n\n  classes = {\n    paper: {\n      padding: '7px',\n      marginBottom: '4px'\n    },\n    formControl: {\n      margin: '8px',\n      minWidth: '70%'\n    },\n    button: {\n      margin: '8px 8px 0px 0px',\n    },\n  };\n  showLatencies = () => {\n    if(this.state.checked)\n      this.setState({checked: false});\n    else\n    this.setState({checked: true});\n  };\n  // Importar y exportar\n  download = (filename, text) => {\n    var element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', filename);\n    element.style.display = 'none';\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  };\n  exportar = () => {\n    var exportObject = {\n      asignaciones: this.state.asignaciones,\n      sentencias: this.state.sentencias,\n    };\n    exportObject = JSON.stringify(exportObject);\n    this.download(\"traza\" + Date.now() + \".txt\", exportObject);\n  };\n  importar = (event) => {\n    var file = event.target.files[0];\n    var textType = /text.*/;\n    // ranciolate\n    var that = this;\n    if (file.type.match(textType)) {\n      var reader = new FileReader();\n      reader.onload = function(e) {\n        //alert(reader.result);\n        // leyo bien\n        var readObject = JSON.parse(reader.result);\n        that.setState({\n          asignaciones: readObject.asignaciones,\n          sentencias: readObject.sentencias,\n          sentenciaActual: readObject.asignaciones.length + 1,\n        }, () => {\n          //alert(that.state.sentenciaActual);\n        });\n      }\n      reader.readAsText(file);\t\n    } else {\n      alert(\"File not supported!\");\n    }\n    \n  };\n  // Importar y exportar\n  handleChangeOnTrazaRadio = (event) => {\n    //console.log(event.target.value);\n    const oldIndex = this.state.changeTrazaState;\n    const newIndex = event.target.value;\n    let oldNodes = []\n    let newNodes = []\n    this.state.trazas[oldIndex].nodes.forEach(group => {\n      group.forEach(node => {\n                        node.group = 'a'\n                    })  \n      oldNodes = [...oldNodes, ...group]\n      }\n      )\n    this.state.spaceGraphNodes.update(oldNodes)\n    let letter = 'b'\n    this.state.trazas[newIndex].nodes.forEach(group => {\n      group.forEach(node => {\n        node.group = letter\n      })\n      letter = letter.concat('b');\n      newNodes = [...newNodes, ...group]\n    })\n    this.state.spaceGraphNodes.update(newNodes)\n    this.setState({changeTrazaState: event.target.value});\n  };\n  render(){\n    return (\n      <>\n        <CssBaseline />\n        <div className=\"App\">\n          \n          <AppBar position=\"relative\">\n            <Toolbar>\n              <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                Trazas\n              </Typography>\n            </Toolbar>\n          </AppBar>\n          <main>\n            <br />\n            <Container>\n              <Grid\n                container\n                justify=\"center\"\n                alignItems=\"flex-start\"\n                spacing={3}\n              >\n                  <Grid item xs={3} height=\"100%\" >\n                    <AddOps formVisibility={this.state.formVisibilityControl} \n                            formVisibilityCallBack = {this.callBackFormVisibilityControl}\n                            parentCallback={this.callBackValorAsignacionChange.bind(this)} \n                            callBackUpdateTempSentence={this.callBackUpdateSentencesTemp}\n                            callBackUpdateTempSentenceRead={this.callBackSetRead}\n                            \n                    />\n                  </Grid>\n                  <Grid item xs={5}>\n                    <Collapse in={this.state.showPreview}> \n                      <Paper style={this.classes.paper} elevation={3} >\n                          <PreviewComponent callBackAdd={this.callBackAddSentence} cancelarEdicion={this.cancelarEdicion} valor={this.state.valorAsignacion}></PreviewComponent>\n                      </Paper>\n                    </Collapse>\n                    <Paper style={this.classes.paper} elevation={3} >\n                      <TableContainer component={Paper}>\n                        <Table style={this.classes.tables} size=\"small\" aria-label=\"a dense table\">\n                          <TableHead>\n                            <TableRow>\n                              <TableCell>\n                               <TextField\n                                  value={this.state.n}\n                                  style={{maxWidth: '75px'}}\n                                  id=\"standard-number\"\n                                  label=\"Ciclos\"\n                                  type=\"number\"\n                                  onChange={(event) => this.setState({n:event.target.value < 0 ? 0 : event.target.value})}\n                                  InputLabelProps={{\n                                    shrink: true,\n                                  }}\n                               />\n                              </TableCell>\n                            </TableRow>\n                          </TableHead>\n                          <TableBody>\n                            {this.state.asignaciones.map((row) => (\n                              <TableRow key={row.op} style={{background: row.op == this.state.editOpNumber ? '#EEEEEE' : '#FFF'}}>\n                                <TableCell component=\"th\" scope=\"row\">\n                                  S{row.op}\n                                </TableCell>\n                                <TableCell align=\"left\">{row.sentence}</TableCell>  \n                                <TableCell style={{padding: '0px', width: '3px'}}>\n                                  \n                                  <Button \n                                  onClick={() => {\n                                    // clone array os sentences\n                                    var sentencias = JSON.parse(JSON.stringify(this.state.sentencias));\n                                    // clone array of assigns\n                                    var asignaciones = JSON.parse(JSON.stringify(this.state.asignaciones));\n                                    console.log(sentencias.pop());\n                                    console.log(asignaciones.pop());\n\n                                    this.setState({\n                                      sentencias: sentencias,\n                                      asignaciones: asignaciones,\n                                      sentenciaActual: sentencias.length + 1\n                                    }, \n                                    () => {\n                                      console.log(this.state.sentencias);\n                                    });\n                                    //alert(row.op);\n                                  }}\n                                  style={{padding: '1px', display: this.state.asignaciones.length === row.op ? 'block' : 'none'}} color=\"secondary\">\n                                    ELIMINAR\n                                  </Button>\n                                  <Tooltip style={{textAlign: 'center'}} title=\"Al editar debe agregar una sentencia nueva que se posicionara en este lugar\" arrow>\n                                    <Button onClick={\n                                      () => {this.habilitarEdicion(row.op)}\n                                    } style={{padding: '1px', display: this.state.asignaciones.length !== row.op && row.op !== this.state.editOpNumber ? 'block' : 'none'}} color=\"primary\">\n                                      EDITAR\n                                    </Button>\n                                  </Tooltip>\n                                  <Button onClick={\n                                      () => {\n                                        this.cancelarEdicion();\n                                      } \n                                    } style={{padding: '1px', display: row.op == this.state.editOpNumber ? 'block' : 'none'}} color=\"primary\">\n                                      X\n                                    </Button>\n                                </TableCell>          \n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n                      </TableContainer>\n                      <Button fullWidth type=\"submit\" variant=\"outlined\" align=\"center\"color=\"primary\"  className={this.classes.button} \n                        onClick={() => {\n                          //console.log(JSON.stringify(this.state.sentencias));\n                          this.state.dependancesGraphNodes.clear(); //Limpio el grafo de dependencias para recalcularlo\n                          this.state.dependancesGraphEdges.clear();\n                          //this.setState({sentencias: sentencesExample});\n                           // Codigo de agregar sentencia a los grafos\n                           this.state.sentencias.forEach( (s) => {this.getLatency(s)}); //Setteo la latencia de cada sentencia en base a la cadena de operaciones\n                           //console.log(this.state.sentencias);\n                          createGraph({ //Llamado a la funcion addSentence de DependancesAlgorithm\n                            nodes: this.state.dependancesGraphNodes,\n                            edges: this.state.dependancesGraphEdges\n                          }, this.state.sentencias);\n                          /// Fin codigo de agregar sentencia a grafos\n                          this.setState({\n                            showPreview: false\n                          });\n\n                          this.state.spaceGraphNodes.clear();//Limpio el grafo espacial para recalcularlo\n                          this.state.spaceGraphEdges.clear();\n                          \n                          var ciclos = getCycles({ //Llamado a la funcion addSentence de DependancesAlgorithm\n                            nodes: this.state.dependancesGraphNodes,\n                            edges: this.state.dependancesGraphEdges\n                          });\n                          this.setState({\n                            cycles: ciclos,\n                            \n                          },\n                          () => {\n                            \n                            var tempTraza = getTrazas(this.state.dependancesGraphEdges, this.state.dependancesGraphNodes, this.state.cycles, this.state.sentencias, this.state.n).sort((a, b) => {\n                              return b.total - a.total;\n                            });\n                            this.setState({\n                              trazas: this.state.cycles.length > 0 ? tempTraza : [{tiempo: 0, total: 1}],\n                              checkedSecond: this.state.cycles.length > 0,\n                              noTrazas: !(this.state.cycles.length > 0)\n                            }, () => {\n                              createSpaceGraph({ //Llamado a la funcion addSentence de DependancesAlgorithm\n                                nodes: this.state.dependancesGraphNodes,\n                                edges: this.state.dependancesGraphEdges\n                              }, {\n                                nodes: this.state.spaceGraphNodes,\n                                edges: this.state.spaceGraphEdges\n                              }, this.state.trazas);\n                              console.log(\"TRAZEANAAAAS \", this.state.trazas);\n                            });\n                          });\n                          \n                       \n\n\n                        }}>\n                              Calcular trazas\n                        </Button>\n                        <Collapse in={this.state.noTrazas}> \n                          <div style={{\n                            background: '#FF9DB7',\n                            fontWeight: 'bold',\n                            color: '#C20035',\n                            paddingTop: '10px',\n                            paddingBottom: '10px',\n                            textAlign: 'center',\n                            marginTop: '5px'\n                          }}>\n                            No se han encontrado trazas\n                          </div>\n                        </Collapse>\n                    </Paper>\n                  </Grid>\n                  <Grid item xs={2} >\n                    <Paper style={this.classes.paper} elevation={3} > \n                        <Fragment>\n                        <input\n                          accept=\"text/*\"\n                          id=\"contained-button-file\"\n                          style={{display: 'none'}}\n                          type=\"file\"\n                          onChange={(event) => {\n                            this.importar(event);\n                          }}\n                        />\n                        <label htmlFor=\"contained-button-file\">\n                          <Button fullWidth variant=\"outlined\" component=\"span\" align=\"center\" color=\"primary\"  className={this.classes.button}\n                          onClick={() => {\n                            console.log(JSON.parse(this.state.sentencias));\n                          }}>\n                              Importar\n                          </Button>\n                        </label>\n                        </Fragment>\n                      <Button fullWidth type=\"submit\" variant=\"outlined\" align=\"center\" color=\"primary\"  className={this.classes.button}\n                        onClick={() => {\n                          this.exportar();\n                        }}>\n                        Exportar\n                      </Button> \n                    </Paper>\n                    <Paper style={this.classes.paper} elevation={3}>\n                    <FormControlLabel\n                      control={<Switch checked={this.state.checked} onChange={this.showLatencies} />}\n                      label=\"Latencias\"\n                      width=\"100%\"\n                    />\n                    <Collapse in={this.state.checked}>\n                      <LatencyPaper classes={this.classes} latencias={this.state.latencias} onChangeTxtFieldLatency = {(op, latency) => {\n                                                                                      if (latency < 0)\n                                                                                          this.setState( {latencias: {...this.state.latencias, [op]: 0} });\n                                                                                      else if (latency > 10)\n                                                                                          this.setState( {latencias:{...this.state.latencias,  [op]: 10 }});\n                                                                                      else\n                                                                                          this.setState( {latencias: {...this.state.latencias,  [op]: parseInt(latency) }});\n                                                                                      }\n                                                                                    } />\n                    </Collapse>\n                    </Paper>\n                    </Grid>\n\n                    \n              </Grid>\n              <Collapse in={this.state.checkedSecond}>\n                <Grid containter \n                container\n                justify=\"center\"\n                alignItems=\"flex-start\"\n                spacing={3}\n                style={{\n                  marginTop: '10px'\n                }}\n                >\n                <Grid item xs={6}> \n                    <Paper style={this.classes.paper} elevation={3} >\n                      <Typography component=\"h5\" variant=\"h5\" align=\"center\" color=\"textPrimary\" gutterBottom>\n                        Trazas\n                      </Typography>   \n                      <RadioGroup onChange={this.handleChangeOnTrazaRadio}> \n                      <Table aria-label=\"simple table\">\n                        <TableHead>\n                          <TableRow>\n                            <TableCell><b>Aceleracion</b></TableCell>\n                            <TableCell><b>Resultado</b></TableCell>\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                        <TableRow>\n                            <TableCell component=\"th\" scope=\"row\">\n                              ({this.state.trazas[0].tiempo}*{this.state.n})/{this.state.trazas[0].total}\n                            </TableCell>\n                            <TableCell component=\"th\" scope=\"row\">\n                              {(this.state.trazas[0].tiempo*this.state.n)/this.state.trazas[0].total}\n                            </TableCell>\n                          </TableRow> \n                        </TableBody>\n                      </Table>\n                      <Table aria-label=\"simple table\">\n                        <TableHead>\n                          <TableRow>\n                            <TableCell><b>Camino</b></TableCell>\n                            <TableCell align=\"right\"><b>Suma</b></TableCell>\n                            <TableCell align=\"right\"><b>Total</b></TableCell>\n                            <TableCell align=\"right\"><b>Ver</b></TableCell>\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          \n                        {\n                          this.state.trazas.map((e, indice) => \n                            (\n                            <TableRow style={{background: (indice === 0) ? '#FFD2DE' : '#FFF'}} key={indice}>\n                              <TableCell component=\"th\" scope=\"row\">\n                                { \n                                  e.camino\n                                }\n                              </TableCell>\n                              <TableCell align=\"right\">\n                                {\n                                  e.latencias\n                                } \n                              </TableCell>\n                              <TableCell align=\"right\">\n                                {\n                                  e.total\n                                } \n                              </TableCell>\n                              <TableCell align=\"right\">\n                                <Radio\n                                  value={indice}\n                                  inputProps={{ 'aria-label': 'B' }}\n                                  checked={\n                                    indice == this.state.changeTrazaState ? true : false\n                                  }\n                                  />\n                                    </TableCell>\n                            </TableRow>\n                          ))\n                        }\n                              \n                            \n                          \n                        </TableBody>\n                      </Table>  \n                      </RadioGroup>                                                           \n                    </Paper>\n                  </Grid>\n                  <Grid item xs={4}>\n                  <Paper style={this.classes.paper} elevation={3} >\n                          <Typography component=\"h5\" variant=\"h5\" align=\"center\" color=\"textPrimary\" gutterBottom>\n                            Grafo de dependencias\n                          </Typography>\n                          <DependancesGraph \n                            graph = {{nodes:[], edges:[]}}\n                            getNodes = {this.getNodesDependancesGraph.bind(this)}\n                            getEdges= {this.getEdgesDependancesGraph.bind(this)}\n                          />\n                    </Paper>\n                  </Grid>                                                                  \n                </Grid>\n                <Grid container\n                justify=\"center\"\n                alignItems=\"flex-start\"\n                spacing={3}> \n                  <Grid item xs={10}> \n                    <Paper style={this.classes.paper} height=\"100%\" elevation={3} > \n                            <Typography component=\"h5\" variant=\"h5\" align=\"center\" color=\"textPrimary\" gutterBottom>\n                              Grafo espacial\n                            </Typography>\n                            <SpaceGraph \n                              graph = {{nodes:[], edges:[]}}\n                              getNodes = {this.getNodesSpaceGraph.bind(this)}\n                              getEdges= {this.getEdgesSpaceGraph.bind(this)}\n                            />\n                    </Paper> \n                  </Grid>                                                   \n                                                                    \n                </Grid>\n              </Collapse>\n              <center> \n                <p style={{color: '#A0A0A0'}}>Martin Lorenzo y Valentin Fernandez - Abril 2020</p>\n              </center>\n            </Container>\n          </main>\n        </div>\n      </>\n    );\n  }\n}\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}