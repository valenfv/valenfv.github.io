{"version":3,"sources":["DependancesGraph.js","SpaceGraph.js","PreviewComponent.js","LatencyPaper.js","App.js","DependancesAlgorithm.js","serviceWorker.js","index.js"],"names":["DependancesGraph","graph","this","props","getNodes","getEdges","Component","SpaceGraph","options","layout","groups","a","color","highlight","background","b","c","physics","enabled","interaction","dragNodes","dragView","hover","hoverConnectedEdges","multiselect","navigationButtons","selectable","selectConnectedEdges","tooltipDelay","zoomView","events","selectNode","event","nodeAux","nodes","group","body","push","selectNodes","key","PreviewComponent","state","valor","FormControl","style","minWidth","TextField","disabled","label","variant","name","type","value","onChange","setState","target","Button","onClick","callBackAdd","LatencyPaper","onChangeTxtFieldLatency","bind","id","classes","Paper","paper","elevation","component","formControl","FormLabel","Grid","container","direction","item","xs","maxWidth","latencias","asignacion","inputProps","min","max","step","InputLabelProps","shrink","resta","multiplicacion","division","suma","useStyles","makeStyles","theme","padding","marginBottom","margin","spacing","button","vars","arVar","end","i","String","fromCharCode","AddOps","React","useState","actualAssign","setActualAssign","addNewOp","parentCallback","setValue","assign","setAssign","letter","setLetter","handleChangeVarAr","letterA","setLetterA","handleChangeVarArA","op","setOp","index","setIndex","cte","setCte","latency","setLatency","id_var","offset","written","setWritten","read","setRead","useEffect","callBackUpdateTempSentence","callBackUpdateTempSentenceRead","className","Typography","align","gutterBottom","display","formVisibility","RadioGroup","aria-label","FormControlLabel","control","Radio","width","InputLabel","Select","labelId","map","e","MenuItem","fullWidth","where","inside","toString","concat","addAssignAr","formVisibilityCallBack","App","valorAsignacion","asignaciones","formVisibilityControl","sentenciaActual","sentencias","sentenciaTemporal","latencia","dependancesGraphNodes","dependancesGraphEdges","dependancesAlgorithm","graphAlgorithm","variablesLeidas","spaceGraphNodes","spaceGraphEdges","n","callBackSetRead","Object","callBackSetWritten","callBackFormVisibilityControl","show","callBackValorAsignacionChange","childData","callBackUpdatePreview","newOp","callBackUpdateSentencesTemp","write","latenciaString","callBackUpdateSentencesRead","callBackAddSentence","sentence","download","filename","text","element","document","createElement","setAttribute","encodeURIComponent","appendChild","click","removeChild","exportar","exportObject","JSON","stringify","Date","now","importar","file","files","that","match","reader","FileReader","onload","readObject","parse","result","length","readAsText","alert","edges","CssBaseline","AppBar","position","Toolbar","noWrap","Container","justify","alignItems","TableContainer","Table","tables","size","TableHead","TableRow","TableCell","TableBody","row","scope","splice","console","log","clear","sentencesExample","forEach","s","getLatency","graphGUI","variablesEscritas","sentencia","add","undefined","variableLeida","node","RegExp","test","get","from","to","createGraph","dependancesGraph","spaceGraph","N","adjacentList","myCycles","getIds","edgeId","edge","nodeIds","findCircuits","j","x","y","createSpaceGraph","getNodesDependancesGraph","getEdgesDependancesGraph","getNodesSpaceGraph","getEdgesSpaceGraph","accept","htmlFor","parseInt","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"otCAIqBA,E,uKAGb,OACI,kBAAC,IAAD,CACIC,MAAQC,KAAKC,MAAMF,MACnBG,SAAYF,KAAKC,MAAMC,SACvBC,SAAWH,KAAKC,MAAME,e,GAPQC,aCDzBC,E,4MACjBC,QAAU,CACNC,OAAQ,GAQRC,OAAQ,CACJC,EAAG,CACCC,MAAO,CACHC,UAAU,CACNC,WAAY,SAIxBC,EAAG,CACCH,MAAO,CACHC,UAAW,CACPC,WAAY,WAIxBE,EAAG,CACCJ,MAAO,CACHC,UAAU,CACNC,WAAW,aAK3BG,QAAS,CACLC,SAAS,GAEbC,YAAa,CACTC,WAAW,EACXC,UAAU,EACVC,OAAO,EACPC,qBAAqB,EACrBC,aAAa,EACbC,mBAAmB,EACnBC,YAAY,EACZC,sBAAsB,EACtBC,aAAc,IACdC,UAAU,I,EAKlBC,OAAS,CACLC,WAAY,SAAUC,GAClB,IAEIC,EAFAC,EAAQ,GACNC,EAAQjC,KAAKkC,KAAKF,MAAMF,EAAME,MAAM,IAAI1B,QAAQ2B,MAEtD,IAAIF,KAAW/B,KAAKkC,KAAKF,MAClBhC,KAAKkC,KAAKF,MAAMD,GAASzB,QAAQ2B,QAAUA,GAC1CD,EAAMG,KAAKJ,GAEnB/B,KAAKoC,YAAYJ,GAAO,K,uDAK5B,OACI,kBAAC,IAAD,CAAOK,IAAI,QACPtC,MAAQC,KAAKC,MAAMF,MACnBG,SAAYF,KAAKC,MAAMC,SACvBC,SAAWH,KAAKC,MAAME,SACtByB,OAAQ5B,KAAK4B,OACbtB,QAASN,KAAKM,c,GAvEUF,a,sDCInBkC,E,4MAEjBC,MAAQ,CACJC,MAAQ,EAAKvC,MAAMuC,O,uDAEd,IAAD,OACJ,OAEQ,kBAACC,EAAA,EAAD,CAAaC,MAAO,CAACC,SAAU,SAC/B,kBAACC,EAAA,EAAD,CACQC,UAAQ,EACRC,MAAM,UACNC,QAAQ,WACRC,KAAK,OACLC,KAAK,OACLZ,IAAI,MACJa,MAAOlD,KAAKC,MAAMuC,MAClBW,SAAU,SAACrB,GACT,EAAKsB,SAAS,CACVZ,MAAOV,EAAMuB,OAAOH,WAI5B,kBAACI,EAAA,EAAD,CAAQL,KAAK,SAASM,QAAU,SAACzB,GAC7B,EAAK7B,MAAMuD,eACVT,QAAQ,WAAWrC,MAAM,UAAUiC,SAAS,QAFjD,0B,GAvBwBvC,aCAzBqD,E,kDAEjB,WAAYxD,GAAO,IAAD,8BACd,cAAMA,IACDyD,wBAA0B,EAAKA,wBAAwBC,KAA7B,gBAFjB,E,oEAKM7B,GACpB9B,KAAKC,MAAMyD,wBAAwB5B,EAAMuB,OAAOO,GAAI9B,EAAMuB,OAAOH,S,+BAIjE,IAAMW,EAAU7D,KAAKC,MAAM4D,QAC3B,OACI,kBAACC,EAAA,EAAD,CAAOpB,MAAOmB,EAAQE,MAAOC,UAAW,GACpC,kBAACvB,EAAA,EAAD,CAAawB,UAAU,WAAWvB,MAAOmB,EAAQK,aAC7C,kBAACC,EAAA,EAAD,CAAWF,UAAU,UAArB,8CACA,6BACA,kBAACG,EAAA,EAAD,CAAMC,WAAS,EAAEC,UAAW,UACxB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,IAAE,GACT,kBAAC5B,EAAA,EAAD,CACIF,MAAO,CAAE+B,SAAU,QACnBb,GAAG,aACHd,MAAM,aACNI,MAAOlD,KAAKC,MAAMyE,UAAUC,WAC5BxB,SAAUnD,KAAK0D,wBACfT,KAAK,SACL2B,WAAY,CACRC,IAAK,IACLC,IAAK,KACLC,KAAM,KAEVC,gBAAiB,CACbC,QAAO,MAInB,kBAACb,EAAA,EAAD,CAAMG,MAAI,EAACC,IAAE,GACT,kBAAC5B,EAAA,EAAD,CACIF,MAAO,CAAE+B,SAAU,QACnBb,GAAG,QACHd,MAAM,QACNI,MAAOlD,KAAKC,MAAMyE,UAAUQ,MAC5B/B,SAAUnD,KAAK0D,wBACfT,KAAK,SACL2B,WAAY,CACRC,IAAK,IACLC,IAAK,KACLC,KAAM,KAEVC,gBAAiB,CACbC,QAAO,MAInB,kBAACb,EAAA,EAAD,CAAMG,MAAI,EAACC,IAAE,GACT,kBAAC5B,EAAA,EAAD,CACIF,MAAO,CAAE+B,SAAU,QACnBb,GAAG,iBACHd,MAAM,iBACNI,MAAOlD,KAAKC,MAAMyE,UAAUS,eAC5BhC,SAAUnD,KAAK0D,wBACfT,KAAK,SACL2B,WAAY,CACRC,IAAK,IACLC,IAAK,KACLC,KAAM,KAEVC,gBAAiB,CACbC,QAAO,MAInB,kBAACb,EAAA,EAAD,CAAMG,MAAI,EAACC,IAAE,GACT,kBAAC5B,EAAA,EAAD,CACIF,MAAO,CAAE+B,SAAU,QACnBb,GAAG,WACHd,MAAM,WACNI,MAAOlD,KAAKC,MAAMyE,UAAUU,SAC5BjC,SAAUnD,KAAK0D,wBACfT,KAAK,SACL2B,WAAY,CACRC,IAAK,IACLC,IAAK,KACLC,KAAM,KAEVC,gBAAiB,CACbC,QAAO,MAInB,kBAACb,EAAA,EAAD,CAAMG,MAAI,EAACC,IAAE,GACT,kBAAC5B,EAAA,EAAD,CACIF,MAAO,CAAE+B,SAAU,QACnBb,GAAG,OACHd,MAAM,OACNI,MAAOlD,KAAKC,MAAMyE,UAAUW,KAC5BlC,SAAUnD,KAAK0D,wBACfT,KAAK,SACL2B,WAAY,CACRC,IAAK,IACLC,IAAK,KACLC,KAAM,KAEVC,gBAAiB,CACbC,QAAO,a,GAzGD7E,a,+BC6BpCkF,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCzB,MAAO,CACL0B,QAAS,MACTC,aAAc,OAEhBxB,YAAa,CACXyB,OAAQH,EAAMI,QAAQ,GACtBjD,SAAU,OAEZkD,OAAQ,CACNF,OAAQH,EAAMI,QAAQ,EAAG,EAAG,EAAG,QAK7BE,EAAO,SAACjF,GAKZ,IAHA,IAAIkF,EAAQ,GAERC,EAAMnF,EAAI,GAAK,GACXoF,EAFKpF,EAAK,GAAK,GAEJoF,GAAKD,EAAKC,IAC3BF,EAAM5D,KAAK+D,OAAOC,aAAaF,IAEjC,OAAOF,GAKHK,EAAS,SAACnG,GACd,IAAM4D,EAAUyB,IADQ,EAGgBe,IAAMC,SAAS,IAH/B,mBAGjBC,EAHiB,KAGHC,EAHG,KAmBlBC,EAAW,SAACjE,GAChBgE,EAAgBD,EAAe/D,EAAQ,KACvCvC,EAAMyG,eAAeH,EAAe/D,EAAQ,MArBtB,EAyBE6D,IAAMC,SAAS,aAzBjB,mBAyBjBpD,EAzBiB,KAyBVyD,EAzBU,OA2BIN,IAAMC,SAAS,YA3BnB,mBA2BjBM,EA3BiB,KA2BTC,EA3BS,OAiCIR,IAAMC,SAAS,KAjCnB,mBAiCjBQ,EAjCiB,KAiCTC,EAjCS,KAkClBC,EAAoB,SAAClF,GACzBiF,EAAUjF,EAAMuB,OAAOH,QAnCD,EAqCMmD,IAAMC,SAAS,KArCrB,mBAqCjBW,EArCiB,KAqCRC,EArCQ,KAsClBC,EAAqB,SAACrF,GAC1BoF,EAAWpF,EAAMuB,OAAOH,QAvCF,EA6CJmD,IAAMC,SAAS,KA7CX,mBA6CjBc,EA7CiB,KA6CbC,EA7Ca,OAiDEhB,IAAMC,SAAS,GAjDjB,mBAiDjBgB,EAjDiB,KAiDVC,EAjDU,OAmDFlB,IAAMC,SAAS,GAnDb,mBAmDjBkB,EAnDiB,KAmDZC,EAnDY,OAuDMpB,IAAMC,SAAS,KAvDrB,oBAuDjBoB,GAvDiB,MAuDRC,GAvDQ,SAwDMtB,IAAMC,SAAS,CAACsB,OAAQ,IAAKC,OAAQ,IAxD3C,qBAwDjBC,GAxDiB,MAwDRC,GAxDQ,SAyDA1B,IAAMC,SAAS,MAzDf,qBAyDjB0B,GAzDiB,MAyDXC,GAzDW,MAqEtB,OATF5B,IAAM6B,WAAU,WACdjI,EAAMkI,2BAA2BH,GAAMF,GAASJ,MAElD,CAACI,GAASJ,KACVrB,IAAM6B,WAAU,WACdjI,EAAMmI,+BAA+BJ,MAEvC,CAACA,KAGG,kBAAClE,EAAA,EAAD,CAAOuE,UAAWxE,EAAQE,MAAOC,UAAW,GAC1C,kBAACsE,EAAA,EAAD,CAAYrE,UAAU,KAAKlB,QAAQ,KAAKwF,MAAM,SAAS7H,MAAM,cAAc8H,cAAY,GAAvF,cAGE,kBAAC/F,EAAA,EAAD,CAAaC,MAAO,CAAC+F,QAASxI,EAAMyI,eAAiB,OAAS,SAAWzE,UAAU,WAAYoE,UAAWxE,EAAQK,aAEhH,kBAACC,EAAA,EAAD,CAAWF,UAAU,UAArB,iCACA,kBAAC0E,EAAA,EAAD,CAAYC,aAAW,OAAO5F,KAAK,OAAOE,MAAO0D,EAAQzD,SApCxC,SAACrB,GAC1B+E,EAAU/E,EAAMuB,OAAOH,SAoCb,kBAAC2F,EAAA,EAAD,CAAkB3F,MAAM,WAAW4F,QAAS,kBAACC,EAAA,EAAD,MAAWjG,MAAM,aAC7D,kBAAC+F,EAAA,EAAD,CAAkB3F,MAAM,UAAU4F,QAAS,kBAACC,EAAA,EAAD,MAAWjG,MAAM,aAI9D,kBAACgB,EAAA,EAAD,CAAOkF,MAAO,EAAGvE,SAAS,KAAK4D,UAAWxE,EAAQE,MAAOrB,MAAO,CAAC+F,QAAoB,aAAX7B,EAAwB,QAAU,QAAS5C,UAAW,GAC9H,kBAACvB,EAAA,EAAD,CAAaC,MAAO,CAACC,SAAU,SAC7B,kBAACsG,EAAA,EAAD,CAAYrF,GAAG,SAAf,UACA,kBAACsF,EAAA,EAAD,CAAQC,QAAQ,QAAQvF,GAAG,SAASV,MAAO4D,EAAQ3D,SAAU6D,GAEvDlB,GAAK,GAAMsD,KAAI,SAAAC,GAAC,OAAI,kBAACC,EAAA,EAAD,CAAUpG,MAAOmG,GAAIA,SAKnD,kBAACvF,EAAA,EAAD,CAAOkF,MAAO,EAAGX,UAAWxE,EAAQE,MAAOrB,MAAO,CAAC+F,QAAoB,YAAX7B,EAAuB,QAAU,QAAS5C,UAAW,GAC/G,kBAACvB,EAAA,EAAD,CAAaC,MAAO,CAACC,SAAU,QAC7B,kBAACsG,EAAA,EAAD,CAAYrF,GAAG,SAAf,UACA,kBAACsF,EAAA,EAAD,CAAQC,QAAQ,QAAQvF,GAAG,SAASV,MAAO+D,EAAS9D,SAAUgE,GAExDrB,GAAK,GAAOsD,KAAI,SAAAC,GAAC,OAAI,kBAACC,EAAA,EAAD,CAAUpG,MAAOmG,GAAIA,QAIlD,kBAACzG,EAAA,EAAD,CACEF,MAAO,CAAC+B,SAAU,OAClBb,GAAG,kBACHd,MAAM,cACNG,KAAK,SACLC,MAAOoE,EACPnE,SAAU,SAACrB,GACTyF,EAASzF,EAAMuB,OAAOH,QAExB8B,gBAAiB,CACfC,QAAQ,MAId,kBAAC3B,EAAA,EAAD,CAAQiG,WAAS,EAACtG,KAAK,SAAS+F,MAAM,OAAOzF,QAC3C,WAvGM,IAASiG,EAwGb7B,GAAW,KACG,YAAXf,IAnHG,SAAS4C,GACzB,IAAIC,EAASnC,EAAQ,EAAI,OAASA,EAAMoC,WAAa,KAAOpC,EAAMoC,WACrD,IAAVpC,GAAwB,MAATA,GAChBd,EAAgBgD,EAAMG,OAAO,IAAMF,EAAS,SAC5CxJ,EAAMyG,eAAe8C,EAAMG,OAAO,IAAMF,EAAS,WAEjDjD,EAAgBgD,EAAMG,OAAO,WAC7B1J,EAAMyG,eAAe8C,EAAMG,OAAO,YA6GxBC,CAAY3C,GAEZc,GAAW,CACTH,OAAQX,EACRY,OAAQP,MA7GtBd,GADuBgD,EAiHD1C,GAhHA6C,OAAO,QAC7B1J,EAAMyG,eAAe8C,EAAMG,OAAO,QAgHtB5B,GAAW,CACTH,OAAQd,EACRe,OAAQ,KAIZ5H,EAAM4J,wBAAuB,IAE/B9G,QAAQ,WAAWrC,MAAM,UAAU2H,UAAWxE,EAAQgC,QApBxD,uBAyBF,kBAACpD,EAAA,EAAD,CAAaC,MAAO,CAAC+F,QAASxI,EAAMyI,eAAiB,QAAU,QAASzE,UAAU,WAAYoE,UAAWxE,EAAQK,aAE/G,kBAACC,EAAA,EAAD,CAAWF,UAAU,UAArB,iCACA,kBAAC0E,EAAA,EAAD,CAAYC,aAAW,OAAO5F,KAAK,OAAOE,MAAOA,EAAOC,SAnH7C,SAACrB,GACpB6E,EAAS7E,EAAMuB,OAAOH,SAmHZ,kBAAC2F,EAAA,EAAD,CAAkB3F,MAAM,YAAY4F,QAAS,kBAACC,EAAA,EAAD,MAAWjG,MAAM,cAC9D,kBAAC+F,EAAA,EAAD,CAAkB3F,MAAM,WAAW4F,QAAS,kBAACC,EAAA,EAAD,MAAWjG,MAAM,aAC7D,kBAAC+F,EAAA,EAAD,CAAkB3F,MAAM,UAAU4F,QAAS,kBAACC,EAAA,EAAD,MAAWjG,MAAM,YAC5D,kBAAC+F,EAAA,EAAD,CAAkB3F,MAAM,YAAY4F,QAAS,kBAACC,EAAA,EAAD,MAAWjG,MAAM,eAIhE,kBAACgB,EAAA,EAAD,CAAOkF,MAAO,OAAQX,UAAWxE,EAAQE,MAAOrB,MAAO,CAAC+F,QAAmB,cAAVvF,EAAwB,QAAU,QAASc,UAAW,GACvH,kBAACpB,EAAA,EAAD,CACEM,MAASsE,EACTrE,SAAU,SAACrB,GAAW2F,EAAO3F,EAAMuB,OAAOH,QAC1CR,MAAO,CAACC,SAAU,QAClBiB,GAAG,kBACHd,MAAM,SACNG,KAAK,SACL+B,gBAAiB,CACfC,QAAQ,MAIZ,kBAACnB,EAAA,EAAD,CAAOkF,MAAO,EAAGvE,SAAS,KAAK4D,UAAWxE,EAAQE,MAAOrB,MAAO,CAAC+F,QAAmB,aAAVvF,EAAuB,QAAU,QAASc,UAAW,GAC7H,kBAACvB,EAAA,EAAD,CAAaC,MAAO,CAACC,SAAU,SAC7B,kBAACsG,EAAA,EAAD,CAAYrF,GAAG,SAAf,UACA,kBAACsF,EAAA,EAAD,CAAQC,QAAQ,QAAQvF,GAAG,SAASV,MAAO4D,EAAQ3D,SAAU6D,GAEvDlB,GAAK,GAAMsD,KAAI,SAAAC,GAAC,OAAI,kBAACC,EAAA,EAAD,CAAUpG,MAAOmG,GAAIA,SAKnD,kBAACvF,EAAA,EAAD,CAAOkF,MAAO,EAAGX,UAAWxE,EAAQE,MAAOrB,MAAO,CAAC+F,QAAmB,YAAVvF,EAAsB,QAAU,QAASc,UAAW,GAC9G,kBAACvB,EAAA,EAAD,CAAaC,MAAO,CAACC,SAAU,QAC7B,kBAACsG,EAAA,EAAD,CAAYrF,GAAG,SAAf,UACA,kBAACsF,EAAA,EAAD,CAAQC,QAAQ,QAAQvF,GAAG,SAASV,MAAO+D,EAAS9D,SAAUgE,GAExDrB,GAAK,GAAOsD,KAAI,SAAAC,GAAC,OAAI,kBAACC,EAAA,EAAD,CAAUpG,MAAOmG,GAAIA,QAIlD,kBAACzG,EAAA,EAAD,CACEM,MAAOoE,EACPnE,SAAU,SAACrB,GAAWyF,EAASzF,EAAMuB,OAAOH,QAC5CR,MAAO,CAAC+B,SAAU,OAClBb,GAAG,kBACHd,MAAM,cACNG,KAAK,SACL+B,gBAAiB,CACfC,QAAQ,MAId,kBAACnB,EAAA,EAAD,CAAOkF,MAAO,EAAGX,UAAWxE,EAAQE,MAAOrB,MAAO,CAAC+F,QAAmB,cAAVvF,EAAwB,QAAU,QAASc,UAAW,GAChH,kBAACvB,EAAA,EAAD,CAAaC,MAAO,CAACC,SAAU,SAC3B,kBAACsG,EAAA,EAAD,CAAYrF,GAAG,SAAf,UACA,kBAACsF,EAAA,EAAD,CAAQC,QAAQ,QAAQvF,GAAG,SAASV,MAAOkE,EAAIjE,SAzJxC,SAACrB,GACtBuF,EAAMvF,EAAMuB,OAAOH,SAyJD,kBAACoG,EAAA,EAAD,CAAUpG,MAAM,KAAhB,KACA,kBAACoG,EAAA,EAAD,CAAUpG,MAAM,KAAhB,KACA,kBAACoG,EAAA,EAAD,CAAUpG,MAAM,KAAhB,KACA,kBAACoG,EAAA,EAAD,CAAUpG,MAAM,KAAhB,QAIV,kBAACI,EAAA,EAAD,CAAQiG,WAAS,EAACtG,KAAK,SAASF,QAAQ,WAAWQ,QAAS,WACxD,GAAa,aAAVL,EACDuD,EAASK,GAETmB,GAAQ,CACNL,OAAQd,EACRe,OAAQ,SAGV,GAAa,cAAV3E,EACDuD,EAASe,QAET,GAAa,YAAVtE,EAAoB,CACrB,IAAIuG,EAASnC,EAAQ,EAAI,OAASA,EAAMoC,WAAa,KAAOpC,EAAMoC,WAEhEjD,EADW,IAAVa,GAAuB,MAARA,EACPL,EAAU,IAAMwC,EAAS,IAEzBxC,EAAU,OAGrBgB,GAAQ,CACNL,OAAQX,EACRY,OAAQP,SAIVb,EAASW,GACTO,GAAWD,GAAUN,IAM5B1G,MAAM,UAAU2H,UAAWxE,EAAQgC,QAjCtC,wB,IA+CSiE,E,4MAKnBvH,MAAQ,CACNwH,gBAAiB,GACjBC,aAAc,GACdC,uBAAuB,EACvBC,gBAAiB,EACjBC,WAAY,GACZC,kBAAmB,CACjBxG,GAAI,EACJyG,SAAU,IACVvC,QAAS,KACTE,KAAM,IAERtD,UAAU,CACRC,WAAY,EACZU,KAAM,EACNH,MAAO,EACPC,eAAgB,EAChBC,SAAU,GAMZ4C,KAAM,GACNF,QAAS,KACTwC,sBAAuB,KACvBC,sBAAuB,KACvBC,qBAAqB,CACnBC,eAAgB,GAChBC,gBAAiB,IAEnBC,gBAAiB,KACjBC,gBAAiB,KACjBC,EAAG,K,EAILC,gBAAkB,SAAC9C,GACjB,EAAK5E,SAAS,CACZ4E,KAAM,EAAKzF,MAAMyF,KAAK2B,OAAOoB,OAAOnE,OAAO,GAAIoB,MAC9C,gB,EAGLgD,mBAAqB,SAAClD,GACpB,EAAK1E,SAAS,CAAC0E,QAASA,K,EAI1BmD,8BAAgC,SAACC,GAC/B,EAAK9H,SAAS,CAAC6G,sBAAuBiB,K,EAExCC,8BAAgC,SAACC,GAC7B,EAAKhI,SAAS,CAAC2G,gBAAiBqB,K,EAGpCC,sBAAwB,SAACC,GACrB,EAAKlI,SAAS,CAAC2G,gBAAiB,EAAKxH,MAAMwH,gBAAgBJ,OAAO,IAAM2B,EAAQ,Q,EAGpFC,4BAA8B,SAACvD,EAAMwD,EAAO9D,GAC1C,EAAKtE,SAAS,CACZgH,kBAAmB,CACjBxG,GAAI,EAAKrB,MAAM2H,gBACfG,SAAU3C,EACV+D,eAAgB/D,EAChBI,QAASiD,OAAOnE,OAAO,GAAI4E,O,EAIjCE,4BAA8B,SAAC1D,GAC7B,EAAK5E,SAAS,CACZgH,kBAAmB,CACjBpC,KAAM,EAAKzF,MAAMyF,KAAK2B,OAAOoB,OAAOnE,OAAO,GAAIoB,Q,EAMrD2D,oBAAsB,WACpB,EAAKpJ,MAAM6H,kBAAkBpC,KAAM,EAAKzF,MAAMyF,KAC9C,EAAK5E,SAAS,CACZ4G,aAAc,EAAKzH,MAAMyH,aAAaL,OACpC,CACEiC,SAAU,EAAKrJ,MAAMwH,gBACrB3C,GAAI,EAAK7E,MAAM2H,kBAGjBA,gBAAiB,EAAK3H,MAAM2H,gBAAgB,EAE5CC,WAAW,GAAD,mBAAM,EAAK5H,MAAM4H,YAAjB,CAA6B,EAAK5H,MAAM6H,oBAClDH,uBAAuB,EACvBF,gBAAiB,GACjB/B,KAAM,KAGR,WACE,EAAK5E,SAAS,CAACgH,kBAAmB,W,EAkDxCvG,QAAU,CACRE,MAAO,CACL0B,QAAS,MACTC,aAAc,OAEhBxB,YAAa,CACXyB,OAAQ,MACRhD,SAAU,OAEZkD,OAAQ,CACNF,OAAQ,oB,EAKZkG,SAAW,SAACC,EAAUC,GACpB,IAAIC,EAAUC,SAASC,cAAc,KACrCF,EAAQG,aAAa,OAAQ,iCAAmCC,mBAAmBL,IACnFC,EAAQG,aAAa,WAAYL,GACjCE,EAAQtJ,MAAM+F,QAAU,OACxBwD,SAAS/J,KAAKmK,YAAYL,GAC1BA,EAAQM,QACRL,SAAS/J,KAAKqK,YAAYP,I,EAE5BQ,SAAW,WACT,IAAIC,EAAe,CACjBzC,aAAc,EAAKzH,MAAMyH,aACzBG,WAAY,EAAK5H,MAAM4H,YAEzBsC,EAAeC,KAAKC,UAAUF,GAC9B,EAAKZ,SAAS,QAAUe,KAAKC,MAAQ,OAAQJ,I,EAE/CK,SAAW,SAAChL,GACV,IAAIiL,EAAOjL,EAAMuB,OAAO2J,MAAM,GAG1BC,EAAI,eACR,GAAIF,EAAK9J,KAAKiK,MAHC,UAGgB,CAC7B,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAAShE,GAGvB,IAAIiE,EAAaZ,KAAKa,MAAMJ,EAAOK,QACnCP,EAAK7J,SAAS,CACZ4G,aAAcsD,EAAWtD,aACzBG,WAAYmD,EAAWnD,WACvBD,gBAAiBoD,EAAWtD,aAAayD,OAAS,IACjD,gBAILN,EAAOO,WAAWX,QAElBY,MAAM,wB,uEAjGe3L,GACvBhC,KAAKoD,SAAS,CAACkH,sBAAuBtI,M,+CAGf4L,GACvB5N,KAAKoD,SAAS,CAACmH,sBAAuBqD,M,yCAGrB5L,GACjBhC,KAAKoD,SAAS,CAACuH,gBAAkB3I,M,yCAEhB4L,GACjB5N,KAAKoD,SAAS,CAACwH,gBAAkBgD,M,iCAGxBhC,GACT,IADkB,EACdvG,EAAM,EADQ,cAGJuG,EAASH,gBAHL,IAGlB,IAAI,EAAJ,qBAAsC,CAAC,IAA/BrE,EAA8B,QACpC,OAAOA,GACL,IAAK,IACHA,EAAGpH,KAAKuC,MAAMmC,UAAUC,WACxB,MACF,IAAK,IACHyC,EAAGpH,KAAKuC,MAAMmC,UAAUW,KACxB,MACF,IAAK,IACH+B,EAAGpH,KAAKuC,MAAMmC,UAAUQ,MACxB,MACF,IAAK,IACHkC,EAAGpH,KAAKuC,MAAMmC,UAAUS,eACxB,MACF,IAAK,IACHiC,EAAGpH,KAAKuC,MAAMmC,UAAUU,SACxB,MACF,QACEgC,EAAG,EAGP/B,GAAO+B,GAxBS,8BA0BlBwE,EAASvB,SAAWhF,I,+BA6Db,IAAD,OACN,OACE,oCACE,kBAACwI,EAAA,EAAD,MACA,yBAAKxF,UAAU,OAEb,kBAACyF,EAAA,EAAD,CAAQC,SAAS,YACf,kBAACC,EAAA,EAAD,KACE,kBAAC1F,EAAA,EAAD,CAAYvF,QAAQ,KAAKrC,MAAM,UAAUuN,QAAM,GAA/C,YAKJ,8BACE,6BACA,kBAACC,EAAA,EAAD,KACE,kBAAC9J,EAAA,EAAD,CACEC,WAAS,EACT8J,QAAQ,SACRC,WAAW,aACXxI,QAAS,GAEP,kBAACxB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb,kBAAC,EAAD,CAAQkE,eAAgB1I,KAAKuC,MAAM0H,sBAC3BJ,uBAA0B7J,KAAKiL,8BAC/BvE,eAAgB1G,KAAKmL,8BAA8BxH,KAAK3D,MACxDmI,2BAA4BnI,KAAKuL,4BACjCnD,+BAAgCpI,KAAK8K,mBAG/C,kBAAC1G,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb,kBAACV,EAAA,EAAD,CAAOpB,MAAO1C,KAAK6D,QAAQE,MAAOC,UAAW,GACzC,kBAAC,EAAD,CAAkBR,YAAaxD,KAAK2L,oBAAqBnJ,MAAOxC,KAAKuC,MAAMwH,mBAE/E,kBAACjG,EAAA,EAAD,CAAOpB,MAAO1C,KAAK6D,QAAQE,MAAOC,UAAW,GAC3C,kBAACqK,EAAA,EAAD,CAAgBpK,UAAWH,KACzB,kBAACwK,EAAA,EAAD,CAAO5L,MAAO1C,KAAK6D,QAAQ0K,OAAQC,KAAK,QAAQ5F,aAAW,iBACzD,kBAAC6F,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACC,kBAAC/L,EAAA,EAAD,CACGM,MAAOlD,KAAKuC,MAAMsI,EAClBnI,MAAO,CAAC+B,SAAU,QAClBb,GAAG,kBACHd,MAAM,qBACNG,KAAK,SACLE,SAAU,SAACrB,GAAD,OAAW,EAAKsB,SAAS,CAACyH,EAAE/I,EAAMuB,OAAOH,MAAQ,EAAI,EAAIpB,EAAMuB,OAAOH,SAChF8B,gBAAiB,CACfC,QAAQ,QAMlB,kBAAC2J,EAAA,EAAD,KACG5O,KAAKuC,MAAMyH,aAAaZ,KAAI,SAACyF,GAAD,OAC3B,kBAACH,EAAA,EAAD,CAAUrM,IAAKwM,EAAIzH,IACjB,kBAACuH,EAAA,EAAD,CAAW1K,UAAU,KAAK6K,MAAM,OAAhC,IACID,EAAIzH,IAER,kBAACuH,EAAA,EAAD,CAAWpG,MAAM,QAAQsG,EAAIjD,UAC7B,kBAAC+C,EAAA,EAAD,CAAWjM,MAAO,CAAC+C,QAAS,MAAOuD,MAAO,QACxC,kBAAC1F,EAAA,EAAD,CAAQP,QAAQ,WAChBQ,QAAS,WAEP,IAAI4G,EAAauC,KAAKa,MAAMb,KAAKC,UAAU,EAAKpK,MAAM4H,aAElDH,EAAe0C,KAAKa,MAAMb,KAAKC,UAAU,EAAKpK,MAAMyH,eACxDG,EAAW4E,OAAOF,EAAIzH,GAAK,EAAG,GAC9B4C,EAAa+E,OAAOF,EAAIzH,GAAK,EAAG,GAChC,EAAKhE,SAAS,CACZ+G,WAAYA,EACZH,aAAcA,KAIlBtH,MAAO,CAAC+C,QAAS,OAAQ/E,MAAM,aAd/B,aAuBZ,kBAAC4C,EAAA,EAAD,CAAQiG,WAAS,EAACtG,KAAK,SAASF,QAAQ,WAAWwF,MAAM,SAAQ7H,MAAM,UAAW2H,UAAWrI,KAAK6D,QAAQgC,OACxGtC,QAAS,WACPyL,QAAQC,IAAIvC,KAAKC,UAAU,EAAKpK,MAAM4H,aACtC,EAAK5H,MAAM+H,sBAAsB4E,QACjC,EAAK3M,MAAMgI,sBAAsB2E,QACjC,EAAK9L,SAAS,CAAC+G,WAAYgF,IAE1B,EAAK5M,MAAM4H,WAAWiF,SAAS,SAACC,GAAO,EAAKC,WAAWD,MACvDL,QAAQC,IAAI,EAAK1M,MAAM4H,YCriBlD,SAAqBoF,EAAUpF,GAC3B,IAAIqF,EAAoB,GACxBrF,EAAWiF,SAAQ,SAACK,GAChBT,QAAQC,IAAIQ,EAAUpF,UACtBkF,EAASvN,MAAM0N,IAAI,CACf9L,GAAI6L,EAAU7L,GACdd,MAAO,IAAK2M,EAAU7L,UAEiB+L,IAAxCH,EAAkBC,EAAU3H,WAC3B0H,EAAkBC,EAAU3H,SAAU,SACS6H,IAAhDH,EAAkBC,EAAU3H,QAAQF,QAEnC4H,EAAkBC,EAAU3H,QAAQF,QAAU,CAAC,CAC3C6H,UAAWA,EAAU7L,GACrBiE,OAAQ4H,EAAU3H,QAAQD,OAC1BwC,SAAUoF,EAAUpF,WAIxBmF,EAAkBC,EAAU3H,QAAQF,QAAQzF,KAAK,CAC7CsN,UAAWA,EAAU7L,GACrBiE,OAAQ4H,EAAU3H,QAAQD,OAC1BwC,SAAUoF,EAAUpF,cAGhCF,EAAWiF,SAAQ,SAACK,GAChBA,EAAUzH,KAAKoH,SAAQ,SAACQ,QACQD,IAAzBC,EAAchI,aACkC+H,IAA5CH,EAAkBI,EAAchI,SAC/B4H,EAAkBI,EAAchI,QAAQwH,SAAQ,SAACS,GAC1CJ,EAAU7L,IAAMiM,EAAKJ,UACjBK,OAAO,SAASC,KAAKH,EAAchI,QAC2E,OAA1G2H,EAAS3B,MAAMoC,IAAIH,EAAKJ,UAAU/F,WAAa+F,EAAU7L,GAAG8F,WAAamG,EAAKxF,SAASX,WAAY,MAClG6F,EAAS3B,MAAM8B,IAAI,CACf9L,GAAIiM,EAAKJ,UAAU/F,WAAa+F,EAAU7L,GAAG8F,WAAamG,EAAKxF,SAASX,WAAY,IAEpFuG,KAAMJ,EAAKJ,UACXS,GAAGT,EAAU7L,GACbiE,OAAQ,EACRwC,SAAUwF,EAAKxF,SACfvH,MAAO,IAAM+M,EAAKxF,SAAW,SAIjCwF,EAAKhI,OAAS+H,EAAc/H,OAAS,GAC+G,OAArJ0H,EAAS3B,MAAMoC,IAAIH,EAAKJ,UAAU/F,WAAa+F,EAAU7L,GAAG8F,WAAamG,EAAKxF,SAASX,YAAamG,EAAKhI,OAAO+H,EAAc/H,QAAQ6B,aACrI6F,EAAS3B,MAAM8B,IAAI,CACf9L,GAAIiM,EAAKJ,UAAU/F,WAAa+F,EAAU7L,GAAG8F,WAAamG,EAAKxF,SAASX,YAAamG,EAAKhI,OAAO+H,EAAc/H,QAAQ6B,WAEvHuG,KAAMJ,EAAKJ,UACXS,GAAIT,EAAU7L,GACdiE,OAAOgI,EAAKhI,OAAS+H,EAAc/H,OACnCwC,SAAUwF,EAAKxF,SACfvH,MAAO,IAAK+M,EAAKxF,SAAW,MAAQwF,EAAKhI,OAAS+H,EAAc/H,QAAU,MAMkE,OAArJ0H,EAAS3B,MAAMoC,IAAIH,EAAKJ,UAAU/F,WAAa+F,EAAU7L,GAAG8F,WAAcmG,EAAKxF,SAASX,YAAamG,EAAKhI,OAAO+H,EAAc/H,QAAQ6B,aACtI6F,EAAS3B,MAAM8B,IAAI,CACf9L,GAAIiM,EAAKJ,UAAU/F,WAAa+F,EAAU7L,GAAG8F,WAAcmG,EAAKxF,SAASX,YAAamG,EAAKhI,OAAO+H,EAAc/H,QAAQ6B,WAExHuG,KAAMJ,EAAKJ,UACXS,GAAIT,EAAU7L,GACdiE,OAAQgI,EAAKhI,OAAS+H,EAAc/H,OACpCwC,SAAUwF,EAAKxF,SACfvH,MAAO,IAAK+M,EAAKxF,SAAW,MAAQwF,EAAKhI,OAAS+H,EAAc/H,QAAU,eDmepFsI,CAAY,CACVnO,MAAO,EAAKO,MAAM+H,sBAClBsD,MAAO,EAAKrL,MAAMgI,uBACjB,EAAKhI,MAAM4H,YAGd,EAAK5H,MAAMoI,gBAAgBuE,QAC3B,EAAK3M,MAAMqI,gBAAgBsE,QClnBrD,SAA0BkB,EAAkBC,EAAYC,GAQpD,IARsD,EAQlDC,EAAe,GACfC,EAAW,GATuC,cAUlCJ,EAAiBxC,MAAM6C,UAVW,IAUtD,IAAI,EAAJ,qBAAoD,CAAC,IAA3CC,EAA0C,QAC1CC,EAAOP,EAAiBxC,MAAMoC,IAAIU,QACRf,IAA7BY,EAAaI,EAAKV,KAAK,KACtBM,EAAaI,EAAKV,KAAK,GAAK,IAChCM,EAAaI,EAAKV,KAAK,GAAG9N,KAAKwO,EAAKT,GAAG,GACpCS,EAAKV,OAASU,EAAKT,IAClBM,EAASrO,KAAK,CAACwO,EAAKV,KAAMU,EAAKV,QAhBe,8BAmBtDjB,QAAQC,IAAI,kBAAmBsB,GAG/B,IAAIK,EAAUR,EAAiBpO,MAAMyO,SAErCD,EAAWA,EAAS7G,OAAOkH,IAAaN,IACxCvB,QAAQC,IAAI,YAAauB,GAKzB,IAAI,IAAIM,EAAG,EAAGA,EAAE,GAAIA,IAChB,IAAI,IAAI7K,EAAE,EAAGA,EAAE2K,EAAQnD,OAAO,EAAGxH,IAC7BoK,EAAWrO,MAAM0N,IAAI,CACjB9L,GAAIqC,EAAEyD,WAAaoH,EAAEpH,WACrB5G,MAAM,IAAKmD,EAAEyD,WAAaoH,EAAEpH,WAC5BqH,EAAK,GAAFD,EACHE,EAAS,IAAL/K,EAAE,GACNhE,MAAOgE,EAAEyD,aAMrB0G,EAAiBxC,MAAMwB,SAAQ,SAACuB,GAC5B,IAAI,IAAI1K,EAAG,EAAGA,EAAE,GAAIA,IACb0K,EAAK9I,OAAS,GAAK5B,EAAI0K,EAAK9I,QAAS,GAMhC8I,EAAK9I,OAAS,GAAK5B,EAAI0K,EAAK9I,OAAS,GALzCwI,EAAWzC,MAAM8B,IAAI,CACjBO,KAAMU,EAAKV,KAAKvG,WAAazD,EAAEyD,WAC/BwG,GAAIS,EAAKT,GAAGxG,YAAczD,EAAE0K,EAAK9I,QAAQ6B,aAU5B,IAAdiH,EAAK9I,QACJwI,EAAWzC,MAAM8B,IAAI,CACjBO,KAAMU,EAAKV,KAAKvG,WAAazD,EAAEyD,WAC/BwG,GAAIS,EAAKT,GAAGxG,WAAazD,EAAEyD,gBDsjBzBuH,CAAiB,CACfjP,MAAO,EAAKO,MAAM+H,sBAClBsD,MAAO,EAAKrL,MAAMgI,uBACjB,CACDvI,MAAO,EAAKO,MAAMoI,gBAClBiD,MAAO,EAAKrL,MAAMqI,iBACjB,EAAKrI,MAAMsI,KAvBlB,oBA4BF,kBAAC/G,EAAA,EAAD,CAAOpB,MAAO1C,KAAK6D,QAAQE,MAAOC,UAAW,GACzC,kBAACsE,EAAA,EAAD,CAAYrE,UAAU,KAAKlB,QAAQ,KAAKwF,MAAM,SAAS7H,MAAM,cAAc8H,cAAY,GAAvF,yBAGA,kBAAC,EAAD,CACEzI,MAAS,CAACiC,MAAM,GAAI4L,MAAM,IAC1B1N,SAAYF,KAAKkR,yBAAyBvN,KAAK3D,MAC/CG,SAAWH,KAAKmR,yBAAyBxN,KAAK3D,SAGlD,kBAAC8D,EAAA,EAAD,CAAOpB,MAAO1C,KAAK6D,QAAQE,MAAOC,UAAW,GAC3C,kBAACsE,EAAA,EAAD,CAAYrE,UAAU,KAAKlB,QAAQ,KAAKwF,MAAM,SAAS7H,MAAM,cAAc8H,cAAY,GAAvF,kBAGA,kBAAC,EAAD,CACEzI,MAAS,CAACiC,MAAM,GAAI4L,MAAM,IAC1B1N,SAAYF,KAAKoR,mBAAmBzN,KAAK3D,MACzCG,SAAWH,KAAKqR,mBAAmB1N,KAAK3D,UAIhD,kBAACoE,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb,kBAACV,EAAA,EAAD,CAAOpB,MAAO1C,KAAK6D,QAAQE,MAAOC,UAAW,GACzC,kBAAC,WAAD,KACA,2BACEsN,OAAO,SACP1N,GAAG,wBACHlB,MAAO,CAAC+F,QAAS,QACjBxF,KAAK,OACLE,SAAU,SAACrB,GACT,EAAKgL,SAAShL,MAGlB,2BAAOyP,QAAQ,yBACb,kBAACjO,EAAA,EAAD,CAAQiG,WAAS,EAACxG,QAAQ,WAAWkB,UAAU,OAAOsE,MAAM,SAAS7H,MAAM,UAAW2H,UAAWrI,KAAK6D,QAAQgC,OAC9GtC,QAAS,WACPyL,QAAQC,IAAIvC,KAAKa,MAAM,EAAKhL,MAAM4H,eAFpC,cAQJ,kBAAC7G,EAAA,EAAD,CAAQiG,WAAS,EAACtG,KAAK,SAASF,QAAQ,WAAWwF,MAAM,SAAS7H,MAAM,UAAW2H,UAAWrI,KAAK6D,QAAQgC,OACzGtC,QAAS,WACP,EAAKiJ,aAFT,aAOF,kBAAC,EAAD,CAAc3I,QAAS7D,KAAK6D,QAASa,UAAW1E,KAAKuC,MAAMmC,UAAWhB,wBAA2B,SAAC0D,EAAIM,GAChCA,EAAU,EACV,EAAKtE,SAAU,CAACsB,UAAU,eAAK,EAAKnC,MAAMmC,UAAjB,eAA6B0C,EAAK,MACtDM,EAAU,GACf,EAAKtE,SAAU,CAACsB,UAAU,eAAI,EAAKnC,MAAMmC,UAAhB,eAA6B0C,EAAK,OAE3D,EAAKhE,SAAU,CAACsB,UAAU,eAAK,EAAKnC,MAAMmC,UAAjB,eAA8B0C,EAAKoK,SAAS9J,oB,GAzX9HrB,IAAMjG,WElTnBqR,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS1E,MACvB,2DCZN2E,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9F,SAAS+F,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxD,QAAQwD,MAAMA,EAAMC,c","file":"static/js/main.7c3e0092.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Graph from 'react-graph-vis';\n\n\nexport default class DependancesGraph extends Component\n{\n    render(){\n        return(\n            <Graph \n                graph= {this.props.graph}\n                getNodes = {this.props.getNodes} \n                getEdges= {this.props.getEdges}/>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Graph from 'react-graph-vis';\n\nexport default class SpaceGraph extends Component {\n    options = {\n        layout: {\n            /*hierarchical: {\n                enabled: true,\n                nodeSpacing: 0,\n                levelSeparation: 0,\n                direction: 'LR'\n            }*/\n        },\n        groups: {\n            a: {\n                color: { \n                    highlight:{\n                        background: \"red\"\n                    }   \n                }\n            },\n            b: {\n                color: { \n                    highlight: {\n                        background: \"green\"\n                    }\n                }\n            },\n            c: {\n                color: { \n                    highlight:{\n                        background:\"purple\"\n                    }\n                }\n            }\n        },\n        physics: {\n            enabled: false\n        },\n        interaction: {\n            dragNodes: false,\n            dragView: true,\n            hover: false,\n            hoverConnectedEdges: true,\n            multiselect: true,\n            navigationButtons: false,\n            selectable: true,\n            selectConnectedEdges: true,\n            tooltipDelay: 300,\n            zoomView: true\n        }\n\n    }\n\n    events = {\n        selectNode: function (event) { //This will be executed by Network object, not in SpaceGraph. So this is a Network.\n            let nodes = [];\n            const group = this.body.nodes[event.nodes[0]].options.group; // Get group of selected node\n            let nodeAux;\n            for(nodeAux in this.body.nodes){ //Get the nodes of same group as selected node\n                if(this.body.nodes[nodeAux].options.group === group)\n                    nodes.push(nodeAux);    \n            } \n            this.selectNodes(nodes, true); //Select group of nodes highlighting there edges\n        }\n    }\n\n    render() {\n        return (\n            <Graph key=\"Graph\"\n                graph= {this.props.graph}\n                getNodes = {this.props.getNodes} \n                getEdges= {this.props.getEdges}\n                events={this.events} \n                options={this.options} //Options must be on state? in SpaceGraph class? Outside?\n            />\n        )\n    }\n}","import React, { Component } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\n\nexport default class PreviewComponent extends Component\n{\n    state = {\n        valor : this.props.valor,\n    };\n    render(){\n        return(\n            \n                <FormControl style={{minWidth: '100%'}}> \n                <TextField\n                        disabled\n                        label=\"Preview\"\n                        variant=\"outlined\"\n                        name=\"pepe\"\n                        type=\"text\"\n                        key=\"333\"\n                        value={this.props.valor}\n                        onChange={(event) => {\n                          this.setState({\n                              valor: event.target.value,\n                          });\n                        }}\n                      />\n                      <Button type=\"submit\" onClick= {(event) => {\n                          this.props.callBackAdd();\n                        } }variant=\"outlined\" color=\"primary\" minWidth='100%'>\n                         Agregar sentencia\n                      </Button>\n                      \n                      </FormControl>\n        );\n    }\n}","import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport FormControl from '@material-ui/core/FormControl';\nimport Paper from '@material-ui/core/Paper';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport TextField from '@material-ui/core/TextField';\n\nexport default class LatencyPaper extends Component {\n\n    constructor(props){\n        super(props);\n        this.onChangeTxtFieldLatency = this.onChangeTxtFieldLatency.bind(this);\n    }\n\n    onChangeTxtFieldLatency(event){\n        this.props.onChangeTxtFieldLatency(event.target.id, event.target.value);\n    }\n\n    render() {\n        const classes = this.props.classes;\n        return (\n            <Paper style={classes.paper} elevation={3}>\n                <FormControl component=\"fieldset\" style={classes.formControl}>\n                    <FormLabel component=\"legend\">Seleccione la latencia de las operaciones </FormLabel>\n                    <br />\n                    <Grid container  direction={\"column\"} >\n                        <Grid item xs>\n                            <TextField\n                                style={{ maxWidth: '100%' }}\n                                id=\"asignacion\"\n                                label=\"Asignacion\"\n                                value={this.props.latencias.asignacion}\n                                onChange={this.onChangeTxtFieldLatency}\n                                type=\"number\"\n                                inputProps={{\n                                    min: \"0\",\n                                    max: \"10\",\n                                    step: \"1\",\n                                }}\n                                InputLabelProps={{\n                                    shrink:true\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs>\n                            <TextField\n                                style={{ maxWidth: '100%' }}\n                                id=\"resta\"\n                                label=\"Resta\"\n                                value={this.props.latencias.resta}\n                                onChange={this.onChangeTxtFieldLatency}\n                                type=\"number\"\n                                inputProps={{\n                                    min: \"0\",\n                                    max: \"10\",\n                                    step: \"1\",\n                                }}\n                                InputLabelProps={{\n                                    shrink:true\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs>\n                            <TextField\n                                style={{ maxWidth: '100%' }}\n                                id=\"multiplicacion\"\n                                label=\"Multiplicacion\"\n                                value={this.props.latencias.multiplicacion}\n                                onChange={this.onChangeTxtFieldLatency}\n                                type=\"number\"\n                                inputProps={{\n                                    min: \"0\",\n                                    max: \"10\",\n                                    step: \"1\",\n                                }}\n                                InputLabelProps={{\n                                    shrink:true\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs>\n                            <TextField\n                                style={{ maxWidth: '100%' }}\n                                id=\"division\"\n                                label=\"Division\"\n                                value={this.props.latencias.division}\n                                onChange={this.onChangeTxtFieldLatency}\n                                type=\"number\"\n                                inputProps={{\n                                    min: \"0\",\n                                    max: \"10\",\n                                    step: \"1\",\n                                }}\n                                InputLabelProps={{\n                                    shrink:true\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs>\n                            <TextField\n                                style={{ maxWidth: '100%' }}\n                                id=\"suma\"\n                                label=\"Suma\"\n                                value={this.props.latencias.suma}\n                                onChange={this.onChangeTxtFieldLatency}\n                                type=\"number\"\n                                inputProps={{\n                                    min: \"0\",\n                                    max: \"10\",\n                                    step: \"1\",\n                                }}\n                                InputLabelProps={{\n                                    shrink:true\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </FormControl>\n\n            </Paper>\n        )\n    }\n}","import React, {Fragment} from 'react';\nimport './index.css';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Paper from '@material-ui/core/Paper';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport TextField from '@material-ui/core/TextField';\nimport DependancesGraph from './DependancesGraph';\nimport SpaceGraph from './SpaceGraph';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport PreviewComponent from './PreviewComponent.js';\nimport LatencyPaper from './LatencyPaper';\nimport { createGraph, createSpaceGraph} from './DependancesAlgorithm.js';\nimport sentencesExample from './example.json';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: '7px',\n    marginBottom: '4px'\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: '70%'\n  },\n  button: {\n    margin: theme.spacing(1, 0, 0, 0),\n  },\n}));\n\n\nconst vars = (b) => {\n  // if b is true get first half of alphabet\n  var arVar = []\n  var start = (b) ? 65 : 78;\n  var end = b ? 77 : 90;\n  for(var i = start; i <= end; i++){\n    arVar.push(String.fromCharCode(i));\n  }\n  return arVar;\n  // <MenuItem value=\"10\">Ten</MenuItem>\n};\n\n\nconst AddOps = (props) => {\n  const classes = useStyles();\n\n  const [actualAssign, setActualAssign] = React.useState('');\n  const addAssignAr = function(where){\n      var inside = index > 0 ? \"i + \" + index.toString() : \"i \" + index.toString(); \n      if(index !== 0 && index!== \"0\"){\n        setActualAssign(where.concat(\"[\" + inside + \"] = \"));\n        props.parentCallback(where.concat(\"[\" + inside + \"] = \"));\n      }else {\n        setActualAssign(where.concat(\"[i] = \"));\n        props.parentCallback(where.concat(\"[i] = \"));\n      }\n  }\n  const addAssign = function(where){\n      setActualAssign(where.concat(\" = \"));\n      props.parentCallback(where.concat(\" = \"));\n  }\n\n  const addNewOp = (valor) => {\n    setActualAssign(actualAssign + valor + \" \");\n    props.parentCallback(actualAssign + valor + \" \");\n      \n  };\n  // second fiedset\n  const [value, setValue] = React.useState('constante');\n  // first fieldset\n  const [assign, setAssign] = React.useState('variable');\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  const [letter, setLetter] = React.useState('A');\n  const handleChangeVarAr = (event) => {\n    setLetter(event.target.value);\n  };\n  const [letterA, setLetterA] = React.useState('N');\n  const handleChangeVarArA = (event) => {\n    setLetterA(event.target.value);\n  };\n  const handleChangeAssign = (event) => {\n    setAssign(event.target.value);\n  };\n\n  const [op, setOp] = React.useState('+');\n  const handleChangeOp = (event) => {\n    setOp(event.target.value);\n  };\n  const [index, setIndex] = React.useState(0);\n  // state for literal numbers\n  const [cte, setCte] = React.useState(0); \n \n\n  // keep actual sentence updated\n  const [latency, setLatency] = React.useState(\"=\"); \n  const [written, setWritten] = React.useState({id_var: '0', offset: 0});\n  const [read, setRead] = React.useState(null);\n\n   //props.callBackUpdateTempSentence\n  React.useEffect(() => {\n    props.callBackUpdateTempSentence(read, written, latency);\n  },\n  [written, latency]);\n  React.useEffect(() => {\n    props.callBackUpdateTempSentenceRead(read);\n  },\n  [read]);\n\n    return (\n      <Paper className={classes.paper} elevation={3} >\n        <Typography component=\"h5\" variant=\"h5\" align=\"center\" color=\"textPrimary\" gutterBottom>\n          Asignacion\n        </Typography>\n          <FormControl style={{display: props.formVisibility ? 'none' : 'block'}}  component=\"fieldset\"  className={classes.formControl}>\n            \n            <FormLabel component=\"legend\">Seleccione elemento a agregar</FormLabel>\n            <RadioGroup aria-label=\"quiz\" name=\"quiz\" value={assign} onChange={handleChangeAssign}>\n              <FormControlLabel value=\"variable\" control={<Radio />} label=\"Variable\" />\n              <FormControlLabel value=\"arreglo\" control={<Radio />} label=\"Arreglo\" />\n            </RadioGroup>\n            {/* <FormHelperText>Hola</FormHelperText> */}\n\n            <Paper width={1} maxWidth=\"xl\" className={classes.paper} style={{display: assign === 'variable' ? 'block' : 'none'}} elevation={3} >\n              <FormControl style={{minWidth: '100%'}}> \n                <InputLabel id=\"label\">Nombre</InputLabel>\n                <Select labelId=\"label\" id=\"select\" value={letter} onChange={handleChangeVarAr}>\n                    {\n                      vars(true).map(e => <MenuItem value={e}>{e}</MenuItem>)\n                    }\n                </Select>\n              </FormControl>\n            </Paper>\n            <Paper width={1} className={classes.paper} style={{display: assign === 'arreglo' ? 'block' : 'none'}} elevation={3} >\n              <FormControl style={{minWidth: '30%'}}> \n                <InputLabel id=\"label\">Nombre</InputLabel>\n                <Select labelId=\"label\" id=\"select\" value={letterA} onChange={handleChangeVarArA}>\n                    {\n                      vars(false).map(e => <MenuItem value={e}>{e}</MenuItem>)\n                    }\n                </Select>\n              </FormControl>\n              <TextField\n                style={{maxWidth: '70%'}}\n                id=\"standard-number\"\n                label=\"Modificador\"\n                type=\"number\"\n                value={index}\n                onChange={(event) => {\n                  setIndex(event.target.value);\n                }}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n              />\n            </Paper>\n            <Button fullWidth type=\"submit\" width='100%' onClick={\n              () => {\n                setLatency(\"=\");\n                if(assign === 'arreglo'){\n                  addAssignAr(letterA) \n                  // keep state updated\n                  setWritten({\n                    id_var: letterA,\n                    offset: index\n                  });\n                }else{\n                  addAssign(letter); \n                  setWritten({\n                    id_var: letter,\n                    offset: 0\n                  });\n                }\n                // mostrar menu inferior\n                props.formVisibilityCallBack(true);\n              }\n            } variant=\"outlined\" color=\"primary\" className={classes.button}>\n              Agregar Asignacion\n            </Button>\n          </FormControl>\n        \n          <FormControl style={{display: props.formVisibility ? 'block' : 'none'}} component=\"fieldset\"  className={classes.formControl}>\n            \n            <FormLabel component=\"legend\">Seleccione elemento a agregar</FormLabel>\n            <RadioGroup aria-label=\"quiz\" name=\"quiz\" value={value} onChange={handleChange}>\n              <FormControlLabel value=\"constante\" control={<Radio />} label=\"Constante\" />\n              <FormControlLabel value=\"variable\" control={<Radio />} label=\"Variable\" />\n              <FormControlLabel value=\"arreglo\" control={<Radio />} label=\"Arreglo\" />\n              <FormControlLabel value=\"operacion\" control={<Radio />} label=\"Operacion\" />\n            </RadioGroup>\n            {/* <FormHelperText>Hola</FormHelperText> */}\n\n            <Paper width={'auto'} className={classes.paper} style={{display: value === 'constante' ? 'block' : 'none'}} elevation={3} >\n            <TextField\n              value = {cte}\n              onChange={(event) => {setCte(event.target.value)}}\n              style={{minWidth: '100%'}}\n              id=\"standard-number\"\n              label=\"Number\"\n              type=\"number\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n            </Paper>\n            <Paper width={1} maxWidth=\"xl\" className={classes.paper} style={{display: value === 'variable' ? 'block' : 'none'}} elevation={3} >\n              <FormControl style={{minWidth: '100%'}}> \n                <InputLabel id=\"label\">Nombre</InputLabel>\n                <Select labelId=\"label\" id=\"select\" value={letter} onChange={handleChangeVarAr}>\n                    {\n                      vars(true).map(e => <MenuItem value={e}>{e}</MenuItem>)\n                    }\n                </Select>\n              </FormControl>\n            </Paper>\n            <Paper width={1} className={classes.paper} style={{display: value === 'arreglo' ? 'block' : 'none'}} elevation={3} >\n              <FormControl style={{minWidth: '30%'}}> \n                <InputLabel id=\"label\">Nombre</InputLabel>\n                <Select labelId=\"label\" id=\"select\" value={letterA} onChange={handleChangeVarArA}>\n                    {\n                      vars(false).map(e => <MenuItem value={e}>{e}</MenuItem>)\n                    }\n                </Select>\n              </FormControl>\n              <TextField\n                value={index}\n                onChange={(event) => {setIndex(event.target.value)}}\n                style={{maxWidth: '70%'}}\n                id=\"standard-number\"\n                label=\"Modificador\"\n                type=\"number\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n              />\n            </Paper>\n            <Paper width={1} className={classes.paper} style={{display: value === 'operacion' ? 'block' : 'none'}} elevation={3} >\n              <FormControl style={{minWidth: '100%'}}> \n                  <InputLabel id=\"label\">Nombre</InputLabel>\n                  <Select labelId=\"label\" id=\"select\" value={op} onChange={handleChangeOp}>\n                      <MenuItem value='+'>+</MenuItem>\n                      <MenuItem value='-'>-</MenuItem>\n                      <MenuItem value='*'>*</MenuItem>\n                      <MenuItem value='/'>/</MenuItem>\n                  </Select>\n                </FormControl>\n            </Paper>\n            <Button fullWidth type=\"submit\" variant=\"outlined\" onClick={() => {\n                if(value === 'variable'){\n                  addNewOp(letter)\n                  // agregar a read\n                  setRead({\n                    id_var: letter,\n                    offset: 0\n                  });\n                }else{\n                  if(value === 'constante'){\n                    addNewOp(cte);\n                  }else{\n                    if(value === 'arreglo'){\n                      var inside = index > 0 ? \"i + \" + index.toString() : \"i \" + index.toString();\n                      if(index !== 0 && index!==\"0\"){\n                        addNewOp(letterA + \"[\" + inside + \"]\"); \n                      }else{\n                        addNewOp(letterA + \"[i]\");   \n                      }\n                      // agregar a read\n                      setRead({\n                        id_var: letterA,\n                        offset: index\n                      });\n                    }else{\n                      // operacion\n                      addNewOp(op);\n                      setLatency(latency + op);\n                    }\n                  }\n                }\n                 // no se por que tengo q mandar esa funcion lambda ahi\n\n            }} color=\"primary\" className={classes.button}>\n              Agregar Operacion\n            </Button>\n          </FormControl>\n        \n      </Paper>                   \n    );\n};\n\nfunction createData(op, sentence) {\n  return { op, sentence };\n}\n\n\nexport default class App extends React.Component{\n\n  /*\n    State for functional component\n  */\n  state = {\n    valorAsignacion: '', // valor  de la asignacion sin completar o completada\n    asignaciones: [], // se guarda el valor natural de la asignacion\n    formVisibilityControl: false, // estado de la UI\n    sentenciaActual: 1, // numero de sentencias actuales\n    sentencias: [], // se almacenan las sentencias para ser analizadas por el algoritmo\n    sentenciaTemporal: {\n      id: 0,\n      latencia: \" \",\n      written: null,\n      read: [],\n    }, // sentencia no completada aun,\n    latencias:{ //Estado de las latencias del componente LatencyPaper\n      asignacion: 1,\n      suma: 2,\n      resta: 3,\n      multiplicacion: 4,\n      division: 5\n    },\n    /*\n      id_var: letterA,\n      offset: index\n    */\n    read: [], // leidos actuales\n    written: null, // escrito actual\n    dependancesGraphNodes: null, // No pude hacerlo como graph { nodes, edges } porque setState me rompia\n    dependancesGraphEdges: null,\n    dependancesAlgorithm:{\n      graphAlgorithm: [],\n      variablesLeidas: []\n    },\n    spaceGraphNodes: null,\n    spaceGraphEdges: null,\n    n: 1000\n  };\n\n  \n  callBackSetRead = (read) => {\n    this.setState({\n      read: this.state.read.concat(Object.assign({}, read)),\n    }, () => {\n    });\n  };\n  callBackSetWritten = (written) => {\n    this.setState({written: written});\n  };\n  //\n\n  callBackFormVisibilityControl = (show) => {\n    this.setState({formVisibilityControl: show});\n  };\n  callBackValorAsignacionChange = (childData) =>{\n      this.setState({valorAsignacion: childData});\n  };\n  // no se si se usa pero lo dejo por las dudas AAJA\n  callBackUpdatePreview = (newOp) => {\n      this.setState({valorAsignacion: this.state.valorAsignacion.concat(\" \" + newOp + \" \")});\n  };\n  ///////////////\n  callBackUpdateSentencesTemp = (read, write, latency) => {\n    this.setState({\n      sentenciaTemporal: {\n        id: this.state.sentenciaActual,\n        latencia: latency,\n        latenciaString: latency,\n        written: Object.assign({}, write),\n      } \n    })\n  };\n  callBackUpdateSentencesRead = (read) => {\n    this.setState({\n      sentenciaTemporal: {\n        read: this.state.read.concat(Object.assign({}, read)),\n      }\n    });\n    \n  };\n  // callback to definitely add the sentence\n  callBackAddSentence = () => {\n    this.state.sentenciaTemporal.read= this.state.read;\n    this.setState({\n      asignaciones: this.state.asignaciones.concat(\n        {\n          sentence: this.state.valorAsignacion,\n          op: this.state.sentenciaActual,\n        }\n        ),\n        sentenciaActual: this.state.sentenciaActual+1,\n        //sentencias: this.state.sentencias.concat(Object.assign({}, this.state.sentenciaTemporal)),\n        sentencias: [...this.state.sentencias, this.state.sentenciaTemporal], //Analizar mas profundamente si anda, sino hay que usar el object assign\n        formVisibilityControl: false,\n        valorAsignacion: '',\n        read: []\n      },\n      // callback\n      () => {\n        this.setState({sentenciaTemporal: null});\n      });\n      \n\n  };\n\n  getNodesDependancesGraph(nodes){\n    this.setState({dependancesGraphNodes: nodes});\n  }\n\n  getEdgesDependancesGraph(edges){\n    this.setState({dependancesGraphEdges: edges } );\n  }\n\n  getNodesSpaceGraph(nodes){\n    this.setState({spaceGraphNodes : nodes});\n  }\n  getEdgesSpaceGraph(edges){\n    this.setState({spaceGraphEdges : edges});\n  }\n\n  getLatency(sentence){\n    let suma =0;\n    \n    for(let op of sentence.latenciaString){\n      switch(op){\n        case '=':\n          op=this.state.latencias.asignacion;\n          break;\n        case '+':\n          op=this.state.latencias.suma;\n          break;\n        case '-':\n          op=this.state.latencias.resta;\n          break;\n        case '*':\n          op=this.state.latencias.multiplicacion;\n          break;\n        case '/':\n          op=this.state.latencias.division;\n          break;\n        default:\n          op=0;\n            break;\n      }\n      suma+= op;\n    }\n    sentence.latencia = suma;\n  }\n\n  classes = {\n    paper: {\n      padding: '7px',\n      marginBottom: '4px'\n    },\n    formControl: {\n      margin: '8px',\n      minWidth: '70%'\n    },\n    button: {\n      margin: '8px 8px 0px 0px',\n    },\n  };\n\n  // Importar y exportar\n  download = (filename, text) => {\n    var element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', filename);\n    element.style.display = 'none';\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  };\n  exportar = () => {\n    var exportObject = {\n      asignaciones: this.state.asignaciones,\n      sentencias: this.state.sentencias,\n    };\n    exportObject = JSON.stringify(exportObject);\n    this.download(\"traza\" + Date.now() + \".txt\", exportObject);\n  };\n  importar = (event) => {\n    var file = event.target.files[0];\n    var textType = /text.*/;\n    // ranciolate\n    var that = this;\n    if (file.type.match(textType)) {\n      var reader = new FileReader();\n      reader.onload = function(e) {\n        //alert(reader.result);\n        // leyo bien\n        var readObject = JSON.parse(reader.result);\n        that.setState({\n          asignaciones: readObject.asignaciones,\n          sentencias: readObject.sentencias,\n          sentenciaActual: readObject.asignaciones.length + 1,\n        }, () => {\n          //alert(that.state.sentenciaActual);\n        });\n      }\n      reader.readAsText(file);\t\n    } else {\n      alert(\"File not supported!\");\n    }\n    \n  };\n  // Importar y exportar\n  render(){\n    return (\n      <>\n        <CssBaseline />\n        <div className=\"App\">\n          \n          <AppBar position=\"relative\">\n            <Toolbar>\n              <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                Trazas\n              </Typography>\n            </Toolbar>\n          </AppBar>\n          <main>\n            <br />\n            <Container>\n              <Grid\n                container\n                justify=\"center\"\n                alignItems=\"flex-start\"\n                spacing={3}\n              >\n                  <Grid item xs={3}>\n                    <AddOps formVisibility={this.state.formVisibilityControl} \n                            formVisibilityCallBack = {this.callBackFormVisibilityControl}\n                            parentCallback={this.callBackValorAsignacionChange.bind(this)} \n                            callBackUpdateTempSentence={this.callBackUpdateSentencesTemp}\n                            callBackUpdateTempSentenceRead={this.callBackSetRead}\n                    />\n                  </Grid>\n                  <Grid item xs={5}>\n                    <Paper style={this.classes.paper} elevation={3} >\n                        <PreviewComponent callBackAdd={this.callBackAddSentence} valor={this.state.valorAsignacion}></PreviewComponent>\n                    </Paper>\n                    <Paper style={this.classes.paper} elevation={3} >\n                      <TableContainer component={Paper}>\n                        <Table style={this.classes.tables} size=\"small\" aria-label=\"a dense table\">\n                          <TableHead>\n                            <TableRow>\n                              <TableCell>\n                               <TextField\n                                  value={this.state.n}\n                                  style={{maxWidth: '75px'}}\n                                  id=\"standard-number\"\n                                  label=\"Cantidad de ciclos\"\n                                  type=\"number\"\n                                  onChange={(event) => this.setState({n:event.target.value < 0 ? 0 : event.target.value})}\n                                  InputLabelProps={{\n                                    shrink: true,\n                                  }}\n                               />\n                              </TableCell>\n                            </TableRow>\n                          </TableHead>\n                          <TableBody>\n                            {this.state.asignaciones.map((row) => (\n                              <TableRow key={row.op}>\n                                <TableCell component=\"th\" scope=\"row\">\n                                  S{row.op}\n                                </TableCell>\n                                <TableCell align=\"left\">{row.sentence}</TableCell>  \n                                <TableCell style={{padding: '0px', width: '3px'}}>\n                                  <Button variant=\"outlined\"\n                                  onClick={() => {\n                                    // clone array os sentences\n                                    var sentencias = JSON.parse(JSON.stringify(this.state.sentencias));\n                                    // clone array of assigns\n                                    var asignaciones = JSON.parse(JSON.stringify(this.state.asignaciones));\n                                    sentencias.splice(row.op - 1, 1);\n                                    asignaciones.splice(row.op - 1, 1);\n                                    this.setState({\n                                      sentencias: sentencias,\n                                      asignaciones: asignaciones,\n                                    });\n                                    //alert(row.op);\n                                  }}\n                                  style={{padding: '1px'}} color=\"secondary\">\n                                    X\n                                  </Button>\n                                </TableCell>          \n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n                      </TableContainer>\n                      <Button fullWidth type=\"submit\" variant=\"outlined\" align=\"center\"color=\"primary\"  className={this.classes.button} \n                        onClick={() => {\n                          console.log(JSON.stringify(this.state.sentencias));\n                          this.state.dependancesGraphNodes.clear(); //Limpio el grafo de dependencias para recalcularlo\n                          this.state.dependancesGraphEdges.clear();\n                          this.setState({sentencias: sentencesExample});\n                           // Codigo de agregar sentencia a los grafos\n                           this.state.sentencias.forEach( (s) => {this.getLatency(s)}); //Setteo la latencia de cada sentencia en base a la cadena de operaciones\n                           console.log(this.state.sentencias);\n                          createGraph({ //Llamado a la funcion addSentence de DependancesAlgorithm\n                            nodes: this.state.dependancesGraphNodes,\n                            edges: this.state.dependancesGraphEdges\n                          }, this.state.sentencias);\n                          /// Fin codigo de agregar sentencia a grafos\n\n                          this.state.spaceGraphNodes.clear();//Limpio el grafo espacial para recalcularlo\n                          this.state.spaceGraphEdges.clear();\n                          createSpaceGraph({ //Llamado a la funcion addSentence de DependancesAlgorithm\n                            nodes: this.state.dependancesGraphNodes,\n                            edges: this.state.dependancesGraphEdges\n                          }, {\n                            nodes: this.state.spaceGraphNodes,\n                            edges: this.state.spaceGraphEdges\n                          }, this.state.n);//Paso los ciclos que establecio el usuario\n                        }}>\n                              Calcular trazas\n                        </Button>\n                    </Paper>\n                    <Paper style={this.classes.paper} elevation={3} >\n                        <Typography component=\"h5\" variant=\"h5\" align=\"center\" color=\"textPrimary\" gutterBottom>\n                          Grafo de dependencias\n                        </Typography>\n                        <DependancesGraph \n                          graph = {{nodes:[], edges:[]}}\n                          getNodes = {this.getNodesDependancesGraph.bind(this)}\n                          getEdges= {this.getEdgesDependancesGraph.bind(this)}\n                        />\n                      </Paper>\n                      <Paper style={this.classes.paper} elevation={3} > \n                        <Typography component=\"h5\" variant=\"h5\" align=\"center\" color=\"textPrimary\" gutterBottom>\n                          Grafo espacial\n                        </Typography>\n                        <SpaceGraph \n                          graph = {{nodes:[], edges:[]}}\n                          getNodes = {this.getNodesSpaceGraph.bind(this)}\n                          getEdges= {this.getEdgesSpaceGraph.bind(this)}\n                        />\n                      </Paper>\n                  </Grid>\n                  <Grid item xs={2}>\n                    <Paper style={this.classes.paper} elevation={3} > \n                        <Fragment>\n                        <input\n                          accept=\"text/*\"\n                          id=\"contained-button-file\"\n                          style={{display: 'none'}}\n                          type=\"file\"\n                          onChange={(event) => {\n                            this.importar(event);\n                          }}\n                        />\n                        <label htmlFor=\"contained-button-file\">\n                          <Button fullWidth variant=\"outlined\" component=\"span\" align=\"center\" color=\"primary\"  className={this.classes.button}\n                          onClick={() => {\n                            console.log(JSON.parse(this.state.sentencias));\n                          }}>\n                              Importar\n                          </Button>\n                        </label>\n                        </Fragment>\n                      <Button fullWidth type=\"submit\" variant=\"outlined\" align=\"center\" color=\"primary\"  className={this.classes.button}\n                        onClick={() => {\n                          this.exportar();\n                        }}>\n                        Exportar\n                      </Button> \n                    </Paper>\n                    <LatencyPaper classes={this.classes} latencias={this.state.latencias} onChangeTxtFieldLatency = {(op, latency) => {\n                                                                                      if (latency < 0)\n                                                                                          this.setState( {latencias: {...this.state.latencias, [op]: 0} });\n                                                                                      else if (latency > 10)\n                                                                                          this.setState( {latencias:{...this.state.latencias,  [op]: 10 }});\n                                                                                      else\n                                                                                          this.setState( {latencias: {...this.state.latencias,  [op]: parseInt(latency) }});\n                                                                                      }\n                                                                                    } />\n                    </Grid>\n                    \n              </Grid>\n            </Container>\n          </main>\n        </div>\n      </>\n    );\n  }\n}\n\n\n\n","import findCircuits from 'elementary-circuits-directed-graph';\n \nfunction createSpaceGraph(dependancesGraph, spaceGraph, N){\n    //Creo una estructura mas amigable para trabajar el algoritmo\n    /*let graph = dependancesGraph.nodes.map((node) => node.edges = dependancesGraph.edges.get({ \n        fields: ['id', 'from', 'to', 'offset', 'latencia'],\n        filter: (edge) => {\n            return (edge.from === node.id);\n        }\n    }))*/\n    let adjacentList = [];\n    let myCycles = [];\n    for(const edgeId of dependancesGraph.edges.getIds()){\n        const edge = dependancesGraph.edges.get(edgeId);\n        if(adjacentList[edge.from-1]=== undefined)\n            adjacentList[edge.from-1] = [];\n        adjacentList[edge.from-1].push(edge.to-1)\n        if(edge.from === edge.to)\n            myCycles.push([edge.from, edge.from]);\n    }\n\n    console.log(\"AdjacentList = \", adjacentList);\n\n    \n    let nodeIds = dependancesGraph.nodes.getIds();\n    \n    myCycles = myCycles.concat(findCircuits(adjacentList));\n    console.log(\"Cycles = \", myCycles);\n\n    //console.log(getTrazas(graph, nodeIds.length, N));\n\n    /// Create nodes for GUI\n    for(let j =1; j<10; j++){\n        for(let i=1; i<nodeIds.length+1; i++){\n            spaceGraph.nodes.add({\n                id: i.toString() + j.toString(),\n                label:\"S\"+ i.toString() + j.toString(),\n                x: j*70,\n                y: (i-1)*70,\n                group: i.toString()\n            });\n        };\n    }\n\n    /// Create edges for GUI\n    dependancesGraph.edges.forEach((edge) => {\n        for(let i =1; i<10; i++){\n            if(edge.offset < 0 && i + edge.offset >=0 ){\n                spaceGraph.edges.add({\n                    from: edge.from.toString() + i.toString(),\n                    to: edge.to.toString() + (i+edge.offset).toString()\n                })\n            } \n            else if(edge.offset > 0 && i + edge.offset < 10) {\n                spaceGraph.edges.add({\n                    from: edge.from.toString() + i.toString(),\n                    to: edge.to.toString() + (i+edge.offset).toString()\n                })\n            }\n            else {  \n                if(edge.offset===0){\n                    spaceGraph.edges.add({\n                        from: edge.from.toString() + i.toString(),\n                        to: edge.to.toString() + i.toString()\n                    })\n                }\n            }   \n        }\n    })\n};\n\nfunction createGraph(graphGUI, sentencias){ ///Tener cuidado, estamos admitiendo repetidos\n    let variablesEscritas = [];\n    sentencias.forEach((sentencia) => { //Creo una estructura auxiliar mas amigable que me de informacion sobre las variables escritas\n        console.log(sentencia.latencia);\n        graphGUI.nodes.add({\n            id: sentencia.id,\n            label: \"S\"+ sentencia.id\n        })\n        if(variablesEscritas[sentencia.written]=== undefined)\n            variablesEscritas[sentencia.written]= {};    \n        if(variablesEscritas[sentencia.written.id_var] === undefined){\n\n            variablesEscritas[sentencia.written.id_var] = [{\n                sentencia: sentencia.id,\n                offset: sentencia.written.offset,\n                latencia: sentencia.latencia\n            }];\n        }\n        else\n            variablesEscritas[sentencia.written.id_var].push({\n                sentencia: sentencia.id,\n                offset: sentencia.written.offset,\n                latencia: sentencia.latencia\n            });\n        })\n    sentencias.forEach((sentencia) =>{\n        sentencia.read.forEach((variableLeida) =>{\n            if(variableLeida.id_var !== undefined){ //Si el formato de la variable esta bien\n                if(variablesEscritas[variableLeida.id_var] !== undefined){ //Si alguien escribio la variable\n                    variablesEscritas[variableLeida.id_var].forEach((node) =>{ //Node contiene informacion de quienes escribieron la variable leida\n                        if(sentencia.id <= node.sentencia){ // DEPENDENCIA WAR con ciclos anteriores\n                            if(RegExp(\"[A-M]\").test(variableLeida.id_var)){ //Si es una variable la variableLeida\n                                if(graphGUI.edges.get(node.sentencia.toString() + sentencia.id.toString() + node.latencia.toString()+ \"1\")===null){\n                                    graphGUI.edges.add({\n                                        id: node.sentencia.toString() + sentencia.id.toString() + node.latencia.toString()+ \"1\",\n                                        //key: node.sentencia.toString() + sentencia.id.toString() ,\n                                        from: node.sentencia,\n                                        to:sentencia.id,\n                                        offset: 1,\n                                        latencia: node.latencia,\n                                        label: \"(\" + node.latencia + \", 1)\"  \n                                    })\n                                }\n                            }\n                            else if(node.offset - variableLeida.offset > 0){// Si es un arreglo la variableLeida y offsetWrite - offsetRead > 0 existe dependencia\n                                if(graphGUI.edges.get(node.sentencia.toString() + sentencia.id.toString() + node.latencia.toString() +(node.offset-variableLeida.offset).toString())=== null){\n                                    graphGUI.edges.add({\n                                        id: node.sentencia.toString() + sentencia.id.toString() + node.latencia.toString() +(node.offset-variableLeida.offset).toString() ,\n                                        // key: node.sentencia.toString() + sentencia.id.toString() ,\n                                        from: node.sentencia,\n                                        to: sentencia.id,\n                                        offset:node.offset - variableLeida.offset,\n                                        latencia: node.latencia,\n                                        label: \"(\"+ node.latencia + \", \"+  (node.offset - variableLeida.offset) + \")\"\n                                    })\n                                }\n                            } \n                        } \n                        else {//Dependencia RAW\n                            if(graphGUI.edges.get(node.sentencia.toString() + sentencia.id.toString() +  node.latencia.toString()+ (node.offset-variableLeida.offset).toString())===null){\n                                graphGUI.edges.add({\n                                    id: node.sentencia.toString() + sentencia.id.toString() +  node.latencia.toString()+ (node.offset-variableLeida.offset).toString(),\n                                    // key: node.sentencia.toString() + sentencia.id.toString() ,\n                                    from: node.sentencia,\n                                    to: sentencia.id,\n                                    offset: node.offset - variableLeida.offset,\n                                    latencia: node.latencia,\n                                    label: \"(\"+ node.latencia + \", \"+  (node.offset - variableLeida.offset) + \")\"\n                                })\n                            }\n                        }\n                    })\n                }\n            }\n        })\n        \n    })\n}\n\n\nexport {\n    createGraph,\n    createSpaceGraph\n}\n/*\nS1\tN[i -1] = O[i -2] + P[i -3]\nS2\tA = A * A + N[i -1]\nS3\tQ[i] = N[i] * A\nS4\tP[i] = Q[i + 2] / 2\nS5\tO[i] = Q[i -1] * 5\n\nejemplo \n\nlet variablesEscritas = {};\nsentencias.forEach((sentencia) => {\n    graphAux.push([]);\n    graph.nodes.push({\n        id: sentencia.id,\n        label: \"S\"+ sentencia.id\n    })\n    if(variablesEscritas[sentencias.write]=== undefined)\n        variablesEscritas[sentencias.write]= {};    \n    if(variablesEscritas[sentencia.write.id_var] === undefined)\n        variablesEscritas[sentencia.write.id_var] = [{\n                                                        sentencia: sentencia.id,\n                                                        offset: sentencia.write.offset,\n                                                        latencia: sentencia.latencia\n                                                    }];\n    else\n        variablesEscritas[sentencia.write.id_var].push({\n                                                        sentencia: sentencia.id,\n                                                        offset: sentencia.write.offset,\n                                                        latencia: sentencia.latencia\n                                                        });\n})\nsentencias.forEach((sentencia) =>{\n    sentencia.read.forEach((variableLeida) =>{\n        variablesEscritas[variableLeida.id_var].forEach((node) =>{ //Node contiene informacion de quienes escribieron la variable leida\n            if(sentencia.id <= node.sentencia){ // DEPENDENCIA WAR con ciclos anteriores \n                if(RegExp(\"[A-M]\").test(variableLeida.id_var)){ //Si es una variable la variableLeida\n                    if(graphAux[node.sentencia-1].indexOf(sentencia.id-1)=== -1)\n                        graphAux[node.sentencia-1].push(sentencia.id-1);\n                    graph.edges.push({\n                        id: node.sentencia.toString() + sentencia.id.toString() ,\n                        key: node.sentencia.toString() + sentencia.id.toString() ,\n                        from: node.sentencia,\n                        to:sentencia.id,\n                        offset: 1,\n                        lable: \"(\" + node.latencia + \", 1)\"  \n                    })\n                }\n                else if(node.offset - variableLeida.offset > 0){// Si es un arreglo la variableLeida y offsetWrite - offsetRead > 0 existe dependencia\n                    if(graphAux[node.sentencia-1].indexOf(sentencia.id-1)=== -1)\n                         graphAux[node.sentencia-1].push(sentencia.id-1);    \n                    graph.edges.push({\n                        id: node.sentencia.toString() + sentencia.id.toString() ,\n                        key: node.sentencia.toString() + sentencia.id.toString() ,\n                        from: node.sentencia,\n                        to: sentencia.id,\n                        offset:node.offset - variableLeida.offset,\n                        label: \"(\"+ node.latencia + \", \"+  (node.offset - variableLeida.offset) + \")\"\n                    })\n                } \n            } \n            else {//Dependencia RAW\n                if(graphAux[node.sentencia-1].indexOf(sentencia.id-1)=== -1)\n                    graphAux[node.sentencia-1].push(sentencia.id-1);\n                graph.edges.push({\n                    id: node.sentencia.toString() + sentencia.id.toString() ,\n                    key: node.sentencia.toString() + sentencia.id.toString() ,\n                    from: node.sentencia,\n                    to: sentencia.id,\n                    offset: node.offset - variableLeida.offset,\n                    label: \"(\"+ sentencia.latencia + \", \"+  (node.offset - variableLeida.offset) + \")\"\n                })\n            }\n        })\n    })\n    /*\n    S1: A[i] = 3+2;         \n    S2: B[i] = A[i] *2      \n\n    S1 -> (0) S2\n\n    S1: B[i] = A[i] *2*\n    S2: A[i] = 3+2;\n\n    No hay dependencia\n\n    Por ende, mismo modificador, primero write despues read hay dependencia, caso contrario no existe\n    Offset = offsetWrite - offsetRead\n    S1: B = B*2\n    S1-> (1) S1\n  \n    S1: A[i] = B *2\n    S2: B = 3;\n\n    S2 -> (1) S1\n\n    S1: B = 3;\n    S2: A[i] = B *2 \n    S1 -> (0) S2\n\n    Por ende, misma variable, primero write despues read, hay dependencia offset = offsetWrite - offsetRead\n    primero read despues write hay dependencia offset = offsetWrite - offsetRead + 1\n\n\n    S1: A[i] = E[i-1] *2 \n    S2: E[i] = 45/A[i-1]\n\n    S1-> (1) S2 \n    S2-> (1) S1\n\n    S1: A[i-1] = E[i-2] *2\n    S2: E[i-1] = A[i-1] +3\n    \n    S1-> (0) S2\n    S2-> (1) S1\n\n    Por ende, distinto modificador primero write despues read offset = offsetWrite - offserRead\n    distinto modificador primero read despues write offset = offsetWrite - offsetRead\n\n    S1: A[i+1] = 23\n    S2: B[i] = A[i] * 23\n\n    S1-> (1) S2\n\n    Por ende distinto modificador primero write despues read offset = offsetWrite - offsetRead \n\n    S1: A[i]= E[i-1] - 3\n    S2: E[i-1] = 23/2\n\n    S2-> (1) S1\n\n\n    Distinto modificador\n    \n});\n\n// Fijarse si vamos a necesitar esto dado que nodes y edges seran ahora del tipo dataSet de vis js\nfunction existe(obj, objects){\n    for(var i = 0; i < objects.length; i++){\n      if(obj.id === objects[i].id)\n        return true;\n    }\n    return false;\n  }\nfunction keepUnique(edges){\n    aReturn = []\n    edges.forEach((elem) => {\n      if(!existe(elem, aReturn)){\n        aReturn.push(elem);\n      }\n    });\n    return aReturn;\n  }\n\n  graph.edges = keepUnique(graph.edges);\n  console.log(\"Graph for UI\");\n  console.log(graph);\n  console.log(\"Graph for algorithm\");\n  console.log(graphAux);\n\n\n  getCryclesUtil = (graph, v, visited, recStack, cicles, path) => {\n      // Mark current node as visited and  \n      // adds to recursion stack \n      visited[v] = true;\n      recStack[v] = true;\n      \n      path.push(v);\n      // Recur for all neighbours \n      // if any neighbour is visited and in  \n        // recStack then graph is cyclic \n      for(const neighbour of graph[v]) {\n        if (visited[neighbour] === false) {\n            getCryclesUtil(graph, neighbour, visited, recStack, cicles, path);\n        }\n        else {\n            if (recStack[neighbour] === true) {\n                path.push(neighbour);\n                cicles.push(path.slice());\n                path.pop();\n            }\n        }\n      };\n      \n      // The node needs to be poped from  \n      // recursion stack before function ends \n      path.pop();\n      recStack[v] = false\n    } \n\n// Returns true if graph is cyclic else false \ngetCycles = (graph) => {\n\n    let path=[];\n    let cicles = [];\n    visited =  new Array(graph.length).fill(false); \n    recStack =  new Array(graph.length).fill(false);\n    for(node=0; node< graph.length; node++){\n        if (visited[node] === false) {\n            getCryclesUtil(graph,node,visited,recStack, cicles, path);\n        }\n    } \n    return cicles;\n    } \n\nconsole.log(\"IsCyclick graphaux\");\nconsole.log(getCycles(graphAux));\n*/\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}